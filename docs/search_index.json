[["index.html", "AlberdiLab | Domestic-feral cat metagenomics Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Domestic-feral cat metagenomics Ostaizka Aizpurua , Amanda Bolt Botnen , Mr. Raphael A. Eisenhofer , Iñaki Odriozola , Luisa Santos-Bay , Mads Bjorn Bjornsen , Dr. Thomas Gilbert, Antton Alberdi1 2024-09-11 Chapter 1 Introduction This webbook contains all the code used for data analysis in study on the recovery of metagenome‑assembled genomes and derived microbial communities from domestic and feral cat faecal samples collected in six countries. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/domestic_feral_cat_metagenomics.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(broom) library(broom.mixed) library(rmarkdown) library(janitor) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) library(UpSetR) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(ANCOMBC) library(lme4) library(Hmsc) library(matrixStats) library(MuMIn) #library(MASS) library(nlme) library(emmeans) library(hilldiv2) library(distillR) library(pairwiseAdonis) University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["data-preparation.html", "Chapter 2 Data preparation 2.1 Load data 2.2 Create working objects 2.3 Prepare color scheme 2.4 Wrap working objects", " Chapter 2 Data preparation 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read_csv(&quot;data/sample_metadata.csv&quot;) %&gt;% mutate(location=factor(location,levels=c(&quot;Aruba&quot;,&quot;Brazil&quot;,&quot;CaboVerde&quot;,&quot;Spain&quot;,&quot;Denmark&quot;,&quot;Malaysia&quot;)), origin=factor(origin,levels=c(&quot;Domestic&quot;,&quot;Feral&quot;))) 2.1.2 Genome metadata genome_metadata &lt;- read_csv(&quot;data/genome_metadata.csv&quot;) %&gt;% mutate(phylum = case_when( phylum == &quot;Actinobacteriota&quot; ~ &quot;Actinomycetota&quot;, phylum == &quot;Firmicutes&quot; ~ &quot;Bacillota&quot;, phylum == &quot;Firmicutes_A&quot; ~ &quot;Bacillota_A&quot;, phylum == &quot;Firmicutes_C&quot; ~ &quot;Bacillota_C&quot;, phylum == &quot;Cyanobacteria&quot; ~ &quot;Cyanobacteriota&quot;, phylum == &quot;Proteobacteria&quot; ~ &quot;Pseudomonadota&quot;, TRUE ~ phylum)) 2.1.3 Read counts read_counts &lt;- read_tsv(&quot;data/read_counts.tsv&quot;) %&gt;% rename(genome=1) %&gt;% select(c(&quot;genome&quot;,sample_metadata$sample)) %&gt;% arrange(match(genome,genome_metadata$genome)) 2.1.4 Genome coverage genome_coverage &lt;- read_tsv(&quot;data/genome_coverage.tsv&quot;) %&gt;% rename(genome=1) %&gt;% select(c(&quot;genome&quot;,sample_metadata$sample))%&gt;% arrange(match(genome,genome_metadata$genome)) 2.1.5 Genome tree genome_tree &lt;- read_tree(&quot;data/genome_tree.tre&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_metadata$genome) # keep only MAG tips 2.1.6 Genome annotations genome_annotations &lt;- read_tsv(&quot;data/genome_annotations.tsv.xz&quot;) %&gt;% rename(gene=1, genome=2, contig=3) 2.2 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.1 Filter reads by coverage min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.2 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.2.3 Distill annotations into GIFTs genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19), verbosity=F) 2.3 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;)) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% dplyr::select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) location_colors &lt;- c(&#39;#3D5C61&#39;,&#39;#41B6C0&#39;,&#39;#90C8C5&#39;,&#39;#E5D388&#39;,&#39;#BFA366&#39;,&#39;#6E5244&#39;) origin_colors &lt;- c(&quot;#bd70ae&quot;,&quot;#949293&quot;) 2.4 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, location_colors, origin_colors, # physeq_genome, # physeq_genome_clr, file = &quot;data/data.Rdata&quot;) "],["mag-catalogue.html", "Chapter 3 MAG catalogue 3.1 Genome phylogeny 3.2 Genome quality 3.3 Functional overview 3.4 Functional ordination", " Chapter 3 MAG catalogue load(&quot;data/data.Rdata&quot;) 3.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;)) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% dplyr::select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate prevalence data prevalence_data &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% group_by(genome,location) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,1,0)) %&gt;% group_by(genome) %&gt;% summarise(prevalence=sum(presence)) # Generate Aruba heatmap aruba_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(location==&quot;Aruba&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate Brazil heatmap brazil_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(location==&quot;Brazil&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate Cabo Verde heatmap caboverde_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(location==&quot;CaboVerde&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate Spain heatmap spain_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(location==&quot;Spain&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate Denmark heatmap denmark_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(location==&quot;Denmark&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate Malaysia heatmap malaysia_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(location==&quot;Malaysia&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate domestic heatmap domestic_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(origin==&quot;Domestic&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate feral heatmap feral_heatmap &lt;- genome_counts_filt %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% filter(origin==&quot;Feral&quot;) %&gt;% group_by(genome) %&gt;% summarise(presence=ifelse(sum(abundance)&gt;0,&quot;present&quot;,&quot;absent&quot;)) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.2) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0, width=0.05, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add Aruba ring circular_tree &lt;- gheatmap(circular_tree, aruba_heatmap, offset=0.2, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;#ffffff&quot;,&quot;#3D5C61&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add Brazil ring circular_tree &lt;- gheatmap(circular_tree, brazil_heatmap, offset=0.3, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;#ffffff&quot;,&quot;#41B6C0&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add Cabo Verde ring circular_tree &lt;- gheatmap(circular_tree, caboverde_heatmap, offset=0.4, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;#ffffff&quot;,&quot;#90C8C5&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add Spain ring circular_tree &lt;- gheatmap(circular_tree, spain_heatmap, offset=0.5, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;#ffffff&quot;,&quot;#E5D388&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add Denmark ring circular_tree &lt;- gheatmap(circular_tree, denmark_heatmap, offset=0.6, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;#ffffff&quot;,&quot;#BFA366&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add Malaysia ring circular_tree &lt;- gheatmap(circular_tree, malaysia_heatmap, offset=0.7, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;#ffffff&quot;,&quot;#6E5244&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add prevalence ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=prevalence_data, geom=geom_bar, mapping = aes(x=prevalence, y=genome), offset = 0.4, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add Domestic ring circular_tree &lt;- gheatmap(circular_tree, domestic_heatmap, offset=1.4, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;#ffffff&quot;,&quot;#bd70ae&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() # Add Feral ring circular_tree &lt;- gheatmap(circular_tree, feral_heatmap, offset=1.5, width=0.05, colnames=FALSE) + scale_fill_manual(values=c(&quot;#ffffff&quot;,&quot;#949293&quot;)) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) + new_scale_fill() #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 3.2 Genome quality tibble(Completeness= paste0(round(genome_metadata$completeness %&gt;% mean(),2), &quot;±&quot;, round(genome_metadata$completeness %&gt;% sd(),2)), Contamination= paste0(round(genome_metadata$contamination %&gt;% mean(),2), &quot;±&quot;, round(genome_metadata$contamination %&gt;% sd(),2))) %&gt;% tt() tinytable_hqixvscij7pxsye25k0z .table td.tinytable_css_ugf252u5bl5wa39gq87p, .table th.tinytable_css_ugf252u5bl5wa39gq87p { border-bottom: solid 0.1em #d3d8dc; } Completeness Contamination 90.02±7.79 1.32±1.18 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% dplyr::select(c(genome,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + xlim(c(70,100)) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(70,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure #pdf(&quot;figures/completeness_contamination.pdf&quot;,width=10, height=5) grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) #dev.off() 3.3 Functional overview # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 3.4 Functional ordination # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% dplyr::select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["community-composition.html", "Chapter 4 Community composition 4.1 Taxonomy overview 4.2 Core microbiota", " Chapter 4 Community composition load(&quot;data/data.Rdata&quot;) 4.1 Taxonomy overview 4.1.1 Stacked barplot genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(count &gt; 0) %&gt;% #filter 0 counts ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_grid(. ~ location, scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_blank(), axis.ticks.x =element_blank(), axis.title.x = element_blank(), axis.text.y = element_text(size=8), axis.title.y = element_text(size=12), panel.background = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.border = element_rect(colour = &quot;black&quot;, fill = NA), strip.background = element_rect(fill = &quot;white&quot;, color = &quot;black&quot;), strip.text = element_text(size = 12, lineheight = 0.6)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(count &gt; 0) %&gt;% #filter 0 counts ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_nested(. ~ location + origin, scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_blank(), axis.ticks.x =element_blank(), axis.title.x = element_blank(), axis.text.y = element_text(size=8), axis.title.y = element_text(size=12), panel.background = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.border = element_rect(colour = &quot;black&quot;, fill = NA), strip.background = element_rect(fill = &quot;white&quot;, color = &quot;black&quot;), strip.text = element_text(size = 12, lineheight = 0.6)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(count &gt; 0) %&gt;% #filter 0 counts ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_nested(. ~ origin + location, scales=&quot;free_x&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_blank(), axis.ticks.x =element_blank(), axis.title.x = element_blank(), axis.text.y = element_text(size=8), axis.title.y = element_text(size=12), panel.background = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.border = element_rect(colour = &quot;black&quot;, fill = NA), strip.background = element_rect(fill = &quot;white&quot;, color = &quot;black&quot;), strip.text = element_text(size = 10, lineheight = 0.6)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) 4.1.2 Phylum relative abundances phylum_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum,origin) %&gt;% summarise(relabun=sum(count)) phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(total_mean=mean(relabun*100, na.rm=T), total_sd=sd(relabun*100, na.rm=T), domestic_mean=mean(relabun[origin==&quot;Domestic&quot;]*100, na.rm=T), domestic_sd=sd(relabun[origin==&quot;Domestic&quot;]*100, na.rm=T), feral_mean=mean(relabun[origin==&quot;Feral&quot;]*100, na.rm=T), feral_sd=sd(relabun[origin==&quot;Feral&quot;]*100, na.rm=T)) %&gt;% mutate(total=str_c(round(total_mean,2),&quot;±&quot;,round(total_sd,2)), domestic=str_c(round(domestic_mean,2),&quot;±&quot;,round(domestic_sd,2)), feral=str_c(round(feral_mean,2),&quot;±&quot;,round(feral_sd,2))) %&gt;% arrange(-total_mean) %&gt;% select(phylum,total,domestic,feral) %&gt;% tt() tinytable_w2phqvgnl9k3cw6i4841 .table td.tinytable_css_npy2q8ku2uroli780y8s, .table th.tinytable_css_npy2q8ku2uroli780y8s { border-bottom: solid 0.1em #d3d8dc; } phylum total domestic feral Bacteroidota 29.82±17.98 31.9±17.35 27.24±18.63 Bacillota_A 20.34±13.17 17.97±12.46 23.29±13.57 Actinomycetota 18.39±16.05 18.27±15.93 18.55±16.41 Campylobacterota 9.54±15.11 11.99±18.12 6.51±9.6 Bacillota_C 7.2±8.54 6.87±8.66 7.61±8.46 Bacillota 6.65±9.59 5.34±9.02 8.28±10.13 Pseudomonadota 6.45±9.5 6.56±9.19 6.31±9.98 Fusobacteriota 1.48±3.1 1±1.9 2.07±4.08 Desulfobacterota 0.09±0.33 0.06±0.2 0.14±0.45 Cyanobacteria 0.03±0.24 0.05±0.32 0.01±0.05 phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% dplyr::select(phylum) %&gt;% pull() phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + scale_fill_manual(values=phylum_colors[-8]) + geom_boxplot(alpha=0.2)+ geom_jitter(alpha=0.5) + facet_nested(. ~ location)+ theme_minimal() + theme(legend.position=&quot;none&quot;, strip.text.x = element_text(size = 14, color=&quot;black&quot;,face=&quot;bold&quot;), axis.text.x = element_text(vjust = 0.5, size = 10), axis.text.y = element_text(size = 12), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.title = element_text(size = 14, face = &quot;bold&quot;), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)) ) + labs(y=&quot;Phylum&quot;,x=&quot;Relative abundance&quot;) phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + scale_fill_manual(values=phylum_colors[-8]) + geom_boxplot(alpha=0.2)+ geom_jitter(alpha=0.5) + theme_minimal() + theme(legend.position=&quot;none&quot;) + labs(y=&quot;Phylum&quot;,x=&quot;Relative abundance&quot;) 4.1.3 Family `summarise()` has grouped output by &#39;sample&#39;, &#39;family&#39;. You can override using the `.groups` argument. tinytable_t5cnma1oqqj6b9j8x9nw .table td.tinytable_css_cge55wd6szk9byt4mmto, .table th.tinytable_css_cge55wd6szk9byt4mmto { border-bottom: solid 0.1em #d3d8dc; } family total domestic feral Bacteroidaceae 27.09±17.68 29.17±16.79 24.52±18.62 Lachnospiraceae 12.12±10.54 10.12±10.13 14.62±10.63 Coriobacteriaceae 9.56±9.52 9.92±10.64 9.12±8.03 Helicobacteraceae 6.39±12.29 8.2±15.13 4.13±6.91 Bifidobacteriaceae 4.37±7.2 4.19±6.03 4.6±8.51 Megasphaeraceae 3.45±6.35 3.29±6.05 3.65±6.77 Ruminococcaceae 3.33±3.48 3.29±3.81 3.37±3.07 Campylobacteraceae 3.16±5.5 3.78±5.89 2.38±4.93 Actinomycetaceae 2.62±7.94 2.65±8.06 2.58±7.88 Lactobacillaceae 2.6±7.36 2.56±7.98 2.65±6.61 Succinivibrionaceae 2.3±4.02 2.55±4.06 1.98±3.99 Enterobacteriaceae 2.27±8.36 1.91±7.35 2.71±9.54 Erysipelotrichaceae 1.7±3.28 1.3±2.79 2.2±3.78 Porphyromonadaceae 1.67±6.7 1.73±5.87 1.61±7.69 Atopobiaceae 1.55±4.11 1.03±2.72 2.2±5.32 Selenomonadaceae 1.52±2.63 1.52±2.78 1.52±2.47 Fusobacteriaceae 1.48±3.1 1±1.9 2.07±4.08 Dialisteraceae 1.46±2.13 1.54±2.18 1.36±2.1 Burkholderiaceae 1.46±1.54 1.67±1.69 1.18±1.29 Peptoniphilaceae 1.21±4.39 1.62±4.35 0.7±4.44 Streptococcaceae 1.19±4.98 0.43±1.79 2.13±7.12 Oscillospiraceae 1.09±1.51 0.99±1.22 1.2±1.82 Clostridiaceae 0.9±3.26 0.57±1.29 1.3±4.67 Acidaminococcaceae 0.76±1.4 0.51±0.83 1.07±1.85 Erysipelatoclostridiaceae 0.74±1.2 0.6±0.89 0.92±1.49 Peptostreptococcaceae 0.65±0.97 0.41±0.64 0.93±1.22 Anaerovoracaceae 0.47±1.18 0.49±1.41 0.45±0.83 Pasteurellaceae 0.4±2.49 0.38±2.28 0.44±2.76 Marinifilaceae 0.36±1.06 0.27±1.06 0.48±1.05 Rikenellaceae 0.36±1.49 0.42±1.77 0.28±1.05 Acutalibacteraceae 0.29±0.58 0.22±0.47 0.38±0.68 Mycobacteriaceae 0.27±1.72 0.47±2.3 0.02±0.08 Enterococcaceae 0.25±0.8 0.24±0.89 0.27±0.69 Tannerellaceae 0.22±0.5 0.23±0.51 0.21±0.5 Butyricicoccaceae 0.18±0.39 0.18±0.36 0.19±0.43 UBA660 0.13±0.76 0.18±0.94 0.07±0.44 Desulfovibrionaceae 0.09±0.33 0.06±0.2 0.14±0.45 Muribaculaceae 0.08±0.35 0.05±0.34 0.12±0.36 Anaerotignaceae 0.06±0.23 0.02±0.07 0.1±0.33 CAG-508 0.04±0.14 0.05±0.17 0.02±0.09 CAG-826 0.03±0.17 0.03±0.14 0.03±0.2 Gastranaerophilaceae 0.03±0.24 0.05±0.32 0.01±0.05 Barnesiellaceae 0.03±0.11 0.03±0.11 0.03±0.11 CAG-239 0.02±0.22 0.05±0.29 0±0 UMGS124 0.02±0.13 0.01±0.04 0.03±0.19 UBA1381 0.01±0.07 0±0 0.02±0.11 family_summary %&gt;% left_join(genome_metadata %&gt;% dplyr::select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[-8]) + scale_fill_manual(values=phylum_colors[-8]) + geom_boxplot(alpha=0.2)+ geom_jitter(alpha=0.5) + facet_grid(.~location)+ theme_minimal() + theme(legend.position=&quot;none&quot;, strip.text.x = element_text(size = 14, color=&quot;black&quot;,face=&quot;bold&quot;), axis.text.x = element_text(vjust = 0.5, size = 6), axis.text.y = element_text(size = 12), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.title = element_text(size = 14, face = &quot;bold&quot;), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)))+ labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) family_summary %&gt;% left_join(genome_metadata %&gt;% dplyr::select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[-8]) + scale_fill_manual(values=phylum_colors[-8]) + geom_boxplot(alpha=0.2)+ geom_jitter(alpha=0.5) + facet_grid(.~location)+ theme_minimal() + theme(legend.position=&quot;none&quot;, strip.text.x = element_text(size = 14, color=&quot;black&quot;,face=&quot;bold&quot;), axis.text.x = element_text(vjust = 0.5, size = 6), axis.text.y = element_text(size = 12), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.title = element_text(size = 14, face = &quot;bold&quot;), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)))+ labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 4.1.4 Genus `summarise()` has grouped output by &#39;sample&#39;, &#39;genus&#39;. You can override using the `.groups` argument. tinytable_9n8mb1zrxr2ho82esk1b .table td.tinytable_css_t309ut0zvkj3lt3o98qy, .table th.tinytable_css_t309ut0zvkj3lt3o98qy { border-bottom: solid 0.1em #d3d8dc; } genus total domestic feral Prevotella 16.47±15.19 18.73±15.43 13.66±14.58 Collinsella 9.56±9.52 9.92±10.64 9.12±8.03 Phocaeicola 5.36±6.66 5.03±5.72 5.76±7.72 Helicobacter_B 5.21±11.59 6.48±14.28 3.64±6.77 Bifidobacterium 4.37±7.2 4.19±6.03 4.6±8.51 Bacteroides 3.76±4.85 4±5.32 3.46±4.24 Megasphaera 3.43±6.33 3.28±6.04 3.62±6.75 Campylobacter_D 3.16±5.5 3.78±5.89 2.38±4.93 Roseburia 2.6±5.97 2.21±5.31 3.09±6.74 Blautia_A 2.46±2.74 2.08±2.44 2.93±3.04 Anaerobiospirillum 2.21±4.02 2.44±4.06 1.94±4 Escherichia 1.85±7.36 1.2±4.96 2.66±9.55 Negativibacillus 1.84±2.22 1.68±2.14 2.04±2.32 Blautia 1.71±2.37 1.38±2.27 2.11±2.47 Porphyromonas_A 1.67±6.7 1.73±5.87 1.61±7.69 Pauljensenia 1.57±6.05 0.76±3.94 2.58±7.88 Prevotellamassilia 1.49±2.9 1.38±2.5 1.63±3.35 UBA7748 1.41±4.03 0.94±2.67 1.99±5.23 Megamonas 1.4±2.61 1.36±2.74 1.46±2.47 Dialister 1.35±2 1.47±2.07 1.21±1.93 Sutterella 1.31±1.45 1.53±1.59 1.05±1.22 Fusobacterium_B 1.27±2.87 0.94±1.9 1.69±3.73 Ligilactobacillus 1.24±3.91 1.08±3.47 1.44±4.43 Streptococcus 1.14±4.85 0.43±1.78 2.01±6.94 Lactobacillus 1.13±4.48 1.41±5.16 0.78±3.47 Helicobacter_A 1.12±3.23 1.69±3.93 0.43±1.88 Trueperella 1.05±5.29 1.89±7.02 0±0 Ruminococcus_B 0.92±1.84 0.8±1.51 1.07±2.19 Clostridium_Q 0.91±1.77 0.69±1.17 1.19±2.29 Holdemanella 0.9±1.88 0.73±1.99 1.11±1.74 Clostridium_P 0.88±3.25 0.56±1.3 1.27±4.65 Bulleidia 0.79±2 0.56±1.71 1.08±2.31 Faecalibacterium 0.73±1.55 0.75±1.79 0.71±1.23 Catenibacterium 0.73±1.18 0.59±0.88 0.9±1.46 Gemmiger 0.68±1.21 0.76±1.22 0.58±1.2 Peptacetobacter 0.65±0.97 0.41±0.64 0.93±1.22 Peptoniphilus_A 0.62±2.68 0.81±2.86 0.39±2.45 NA 0.57±1.99 0.76±1.98 0.34±1.99 Faecalimonas 0.56±1.04 0.36±0.89 0.8±1.16 Lawsonibacter 0.49±0.73 0.52±0.84 0.46±0.58 Acidaminococcus 0.46±1.26 0.29±0.58 0.67±1.77 Plesiomonas 0.42±2.05 0.72±2.73 0.05±0.19 Histophilus 0.4±2.49 0.38±2.28 0.44±2.76 Eisenbergiella 0.36±0.61 0.35±0.62 0.38±0.61 Alistipes 0.36±1.49 0.42±1.77 0.28±1.05 Odoribacter 0.34±1.06 0.24±1.06 0.46±1.05 Phascolarctobacterium_A 0.29±0.74 0.21±0.59 0.39±0.88 CAG-81 0.29±0.48 0.24±0.42 0.35±0.54 Catenibacillus 0.28±0.46 0.19±0.36 0.38±0.55 Sellimonas 0.26±0.53 0.26±0.52 0.25±0.54 CAG-317 0.25±0.45 0.2±0.34 0.31±0.55 Ruminococcus_A 0.25±0.34 0.2±0.29 0.31±0.39 UMGS905 0.23±0.51 0.16±0.4 0.31±0.61 Parabacteroides 0.22±0.5 0.23±0.51 0.21±0.5 Mediterraneibacter 0.22±0.67 0.24±0.62 0.19±0.73 Fusobacterium_A 0.2±0.78 0.06±0.24 0.38±1.13 Dysosmobacter 0.2±0.34 0.23±0.37 0.17±0.3 Limosilactobacillus 0.19±0.77 0.07±0.36 0.34±1.08 S5-A14a 0.18±1.04 0.31±1.39 0.02±0.09 Schaedlerella 0.18±0.39 0.19±0.5 0.16±0.2 Butyricicoccus 0.17±0.39 0.16±0.35 0.19±0.43 Flavonifractor 0.16±0.33 0.16±0.37 0.16±0.28 Corynebacterium 0.16±1.31 0.29±1.76 0±0 Enterocloster 0.14±0.21 0.11±0.2 0.18±0.23 Parolsenella 0.14±0.34 0.09±0.14 0.2±0.47 CAG-110 0.14±0.81 0.02±0.1 0.28±1.19 CAG-521 0.13±0.62 0.15±0.74 0.12±0.44 VUNA01 0.12±0.49 0.06±0.17 0.19±0.7 Mitsuokella 0.12±0.51 0.16±0.62 0.06±0.32 CAG-877 0.12±0.66 0.15±0.8 0.07±0.44 Lawsonella 0.11±0.57 0.18±0.75 0.02±0.08 Allisonella 0.11±0.24 0.07±0.17 0.15±0.29 Enterococcus_E 0.1±0.6 0.15±0.8 0.04±0.12 Enterococcus_B 0.09±0.41 0.04±0.23 0.16±0.56 Lachnospira 0.09±0.29 0.11±0.36 0.05±0.15 UMGS1472 0.09±0.15 0.08±0.15 0.1±0.15 CAG-279 0.08±0.35 0.05±0.34 0.12±0.36 Desulfovibrio 0.08±0.32 0.05±0.17 0.13±0.43 UMGS1370 0.08±0.21 0.06±0.16 0.1±0.26 UBA9502 0.07±0.13 0.06±0.1 0.1±0.16 Dorea_B 0.07±0.2 0.07±0.23 0.08±0.17 Robinsoniella 0.07±0.17 0.07±0.19 0.08±0.15 Eubacterium_M 0.06±0.35 0.05±0.32 0.08±0.38 Enterococcus 0.06±0.38 0.05±0.37 0.07±0.41 Fusicatenibacter 0.06±0.27 0.06±0.23 0.06±0.32 Emergencia 0.06±0.12 0.04±0.1 0.07±0.15 Anaerotignum 0.06±0.23 0.02±0.07 0.1±0.33 Lactococcus 0.05±0.34 0±0.01 0.12±0.51 Evtepia 0.05±0.14 0.05±0.11 0.06±0.16 Succinivibrio 0.05±0.22 0.07±0.25 0.04±0.16 Bariatricus 0.05±0.18 0.03±0.13 0.08±0.22 Anaerobutyricum 0.04±0.09 0.03±0.07 0.06±0.1 CAG-354 0.04±0.14 0.05±0.17 0.02±0.09 Dorea_A 0.04±0.27 0±0.04 0.08±0.4 Peptoniphilus_C 0.04±0.36 0.07±0.49 0±0 UMGS1872 0.04±0.24 0.01±0.04 0.08±0.36 Hungatella_A 0.04±0.17 0.04±0.21 0.03±0.12 Mobilibacterium 0.04±0.16 0.01±0.04 0.07±0.24 Latilactobacillus 0.04±0.34 0±0 0.08±0.5 Eubacterium_H 0.03±0.23 0±0 0.07±0.35 UBA4855 0.03±0.17 0.03±0.14 0.03±0.2 Helicobacter_C 0.03±0.21 0.02±0.1 0.05±0.29 Clostridium_A 0.03±0.23 0±0 0.07±0.35 Zag111 0.03±0.24 0.05±0.32 0.01±0.05 Barnesiella 0.03±0.11 0.03±0.11 0.03±0.11 Butyricimonas 0.03±0.11 0.03±0.12 0.03±0.1 Anaerobiospirillum_A 0.03±0.14 0.04±0.19 0.01±0.04 Fournierella 0.03±0.12 0.03±0.15 0.02±0.06 Phocea 0.03±0.09 0.03±0.12 0.02±0.04 Ruminococcus_C 0.03±0.13 0.05±0.18 0±0 CAG-495 0.02±0.22 0.05±0.29 0±0 Ruminococcus_E 0.02±0.21 0.04±0.28 0±0.01 Caecibacter 0.02±0.1 0.01±0.05 0.03±0.14 Helicobacter_D 0.02±0.14 0.02±0.17 0.02±0.08 Erysipelatoclostridium 0.02±0.08 0.01±0.07 0.03±0.09 Clostridium 0.02±0.1 0.01±0.04 0.03±0.15 Paraprevotella 0.02±0.15 0.03±0.2 0±0 CAG-145 0.02±0.07 0.02±0.07 0.02±0.06 Eubacterium_G 0.02±0.11 0.03±0.14 0±0 Anaerostipes 0.02±0.07 0±0.02 0.03±0.11 CAG-988 0.01±0.1 0.03±0.14 0±0 Absicoccus 0.01±0.05 0.02±0.06 0.01±0.04 Phascolarctobacterium 0.01±0.11 0.02±0.15 0±0.03 Marseille-P4683 0.01±0.06 0.02±0.07 0±0 AM07-15 0.01±0.05 0.02±0.07 0±0.02 Mailhella 0.01±0.04 0.01±0.04 0.01±0.05 Parasutterella 0.01±0.08 0±0 0.02±0.12 Levilactobacillus 0.01±0.08 0±0 0.02±0.12 CAG-41 0.01±0.07 0±0 0.02±0.11 genus_summary %&gt;% left_join(genome_metadata %&gt;% dplyr::select(genus,phylum) %&gt;% unique(),by=&quot;genus&quot;) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(genus %in% genus_arrange[1:20]) %&gt;% mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[-8]) + scale_fill_manual(values=phylum_colors[-8]) + geom_boxplot(alpha=0.2)+ geom_jitter(alpha=0.5) + facet_grid(.~location)+ theme_minimal() + theme(legend.position=&quot;none&quot;, strip.text.x = element_text(size = 14, color=&quot;black&quot;,face=&quot;bold&quot;), axis.text.x = element_text(vjust = 0.5, size = 6), axis.text.y = element_text(size = 12), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.title = element_text(size = 14, face = &quot;bold&quot;), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)))+ labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) genus_summary %&gt;% left_join(genome_metadata %&gt;% dplyr::select(genus,phylum) %&gt;% unique(),by=&quot;genus&quot;) %&gt;% filter(genus %in% genus_arrange[1:20]) %&gt;% mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[-8]) + scale_fill_manual(values=phylum_colors[-8]) + geom_boxplot(alpha=0.2)+ geom_jitter(alpha=0.5) + facet_grid(.~origin)+ theme_minimal() + theme(legend.position=&quot;none&quot;, strip.text.x = element_text(size = 14, color=&quot;black&quot;,face=&quot;bold&quot;), axis.text.x = element_text(vjust = 0.5, size = 6), axis.text.y = element_text(size = 12), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.title = element_text(size = 14, face = &quot;bold&quot;), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0)))+ labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 4.2 Core microbiota genome_counts_rel &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% column_to_rownames(., &quot;genome&quot;) genome_counts_rel_pa=1*(genome_counts_rel&gt;0) #MAGrel_pa[1:6,1:6] table_upset_analysis_cont=t(aggregate(t(genome_counts_rel_pa),by=list(sample_metadata$location),FUN=sum)[,-1]) colnames(table_upset_analysis_cont)=levels(as.factor(sample_metadata$location)) table_upset_analysis=(table_upset_analysis_cont&gt;0)*1 table_upset_analysis=data.frame(table_upset_analysis) table_upset_analysis=apply(table_upset_analysis,2,as.integer) rownames(table_upset_analysis) &lt;- rownames(genome_counts_rel_pa) #pdf(&quot;figures/MAG_intersection.pdf&quot;,width=8,height=6, onefile=F) upset(as.data.frame(table_upset_analysis), keep.order = T, sets = rev(c(&quot;Aruba&quot;,&quot;Brazil&quot;,&quot;CaboVerde&quot;,&quot;Spain&quot;,&quot;Denmark&quot;,&quot;Malaysia&quot;)), sets.bar.color= rev(location_colors), mb.ratio = c(0.55, 0.45), order.by = &quot;freq&quot;) #dev.off() mag_prevalence_location &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% pivot_longer(!genome,names_to=&quot;sample&quot;,values_to=&quot;abundance&quot;) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% mutate(presence=ifelse(abundance&gt;0,1,0)) %&gt;% select(genome,sample,presence,location,origin) %&gt;% group_by(genome,location,origin) %&gt;% summarise(presence=ifelse(sum(presence)&gt;0,1,0)) %&gt;% group_by(genome,origin) %&gt;% summarise(presence=sum(presence)) mag_prevalence_location %&gt;% group_by(origin) %&gt;% summarise(mean=mean(presence),sd=sd(presence)) %&gt;% tt() tinytable_ce379xhef0kj1l77tpqr .table td.tinytable_css_h0unvy2r3ws4sc1noy7y, .table th.tinytable_css_h0unvy2r3ws4sc1noy7y { border-bottom: solid 0.1em #d3d8dc; } origin mean sd Domestic 3.122271 1.933745 Feral 3.187773 2.033627 wilcox.test(presence ~ origin, data=mag_prevalence_location) %&gt;% tidy() # A tibble: 1 × 4 statistic p.value method alternative &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; 1 25706. 0.713 Wilcoxon rank sum test with continuity correction two.sided mag_prevalence_location %&gt;% ggplot(aes(x=origin,y=presence, color=origin, fill=origin)) + geom_boxplot() + geom_jitter() + scale_color_manual(values=origin_colors) + scale_fill_manual(values=str_c(origin_colors,&quot;50&quot;)) + theme_minimal() "],["alpha-diversity.html", "Chapter 5 Alpha diversity 5.1 By location 5.2 By behaviour and location", " Chapter 5 Alpha diversity load(&quot;data/data.Rdata&quot;) # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) 5.1 By location 5.1.1 Plots richness_mean &lt;- alpha_div %&gt;% left_join(sample_metadata, by = join_by(sample == sample))%&gt;% group_by(location) %&gt;% dplyr::summarise_at(.vars = names(.)[2], .funs = c(&quot;Richness mean&quot; = &quot;mean&quot;, &quot;Richness sd&quot; = &quot;sd&quot;)) neutral_mean &lt;- alpha_div %&gt;% left_join(sample_metadata, by = join_by(sample == sample))%&gt;% group_by(location) %&gt;% dplyr::summarise_at(.vars = names(.)[3], .funs = c(&quot;Neutral mean&quot; = &quot;mean&quot;, &quot;Neutral sd&quot; = &quot;sd&quot;)) phylogenetic_mean &lt;- alpha_div %&gt;% left_join(sample_metadata, by = join_by(sample == sample))%&gt;% group_by(location) %&gt;% dplyr::summarise_at(.vars = names(.)[4], .funs = c(&quot;Phylogenetic mean&quot; = &quot;mean&quot;, &quot;Phylogenetic sd&quot; = &quot;sd&quot;)) cbind(richness_mean, neutral_mean[, 2:3], phylogenetic_mean[, 2:3])%&gt;% tt() tinytable_5u6ew1pwtu4u5ar6d97n .table td.tinytable_css_k9wglzcbsfv2qmhjvgbw, .table th.tinytable_css_k9wglzcbsfv2qmhjvgbw { border-bottom: solid 0.1em #d3d8dc; } location Richness mean Richness sd Neutral mean Neutral sd Phylogenetic mean Phylogenetic sd Aruba 22.12500 20.75532 11.82228 9.034244 5.522053 1.715380 Brazil 74.81250 23.70434 25.03024 11.453472 6.319856 1.456310 CaboVerde 31.93333 14.60659 15.22392 4.306461 6.984720 1.414464 Spain 70.93333 15.76373 24.75182 11.327483 6.440501 1.526864 Denmark 61.80000 18.60952 20.50564 9.170413 5.594599 1.142487 Malaysia 46.46667 25.00248 24.35444 11.129897 6.509729 1.569361 group_n &lt;- alpha_div %&gt;% left_join(., sample_metadata, by = join_by(sample == sample))%&gt;% select(location) %&gt;% pull() %&gt;% unique() %&gt;% length() #pdf(&quot;figures/diversity_location.pdf&quot;,width=20, height=9) alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata, by = &quot;sample&quot;) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;,&quot;functional&quot;))) %&gt;% ggplot(aes(y = value, x = location, group=location, color=location, fill=location)) + geom_boxplot(outlier.shape = NA, show.legend = FALSE) + geom_jitter(alpha=0.5) + scale_color_manual(values = location_colors) + scale_fill_manual(values = str_c(location_colors, &quot;50&quot;)) + facet_wrap(. ~ metric, scales = &quot;free&quot;, ncol=4) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( axis.ticks.x = element_blank(), strip.text.x = element_text(size = 12, color=&quot;black&quot;,face=&quot;bold&quot;), strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), legend.text=element_text(size=10), legend.title = element_text(size=12))+ guides(fill = guide_legend(override.aes = list(size=3))) #dev.off() 5.1.2 Mixed models Richness Analysis of Deviance Table Model: Negative Binomial(4.3858), link: log Response: richness Terms added sequentially (first to last) Df Deviance Resid. Df Resid. Dev Pr(&gt;Chi) NULL 91 165.145 location 5 66.294 86 98.851 6.039e-13 *** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 R2m R2c delta 0.4502528 0.4502528 lognormal 0.4782539 0.4782539 trigamma 0.4193938 0.4193938 $emmeans location emmean SE df asymp.LCL asymp.UCL Aruba 3.10 0.131 Inf 2.84 3.35 Brazil 4.31 0.123 Inf 4.07 4.56 CaboVerde 3.46 0.131 Inf 3.21 3.72 Spain 4.26 0.127 Inf 4.01 4.51 Denmark 4.12 0.128 Inf 3.87 4.37 Malaysia 3.84 0.129 Inf 3.59 4.09 Results are given on the log (not the response) scale. Confidence level used: 0.95 $contrasts contrast estimate SE df z.ratio p.value Aruba - Brazil -1.2183 0.179 Inf -6.793 &lt;.0001 Aruba - CaboVerde -0.3669 0.185 Inf -1.979 0.3541 Aruba - Spain -1.1650 0.182 Inf -6.392 &lt;.0001 Aruba - Denmark -1.0272 0.183 Inf -5.624 &lt;.0001 Aruba - Malaysia -0.7420 0.184 Inf -4.041 0.0008 Brazil - CaboVerde 0.8513 0.180 Inf 4.732 &lt;.0001 Brazil - Spain 0.0532 0.177 Inf 0.301 0.9997 Brazil - Denmark 0.1911 0.177 Inf 1.079 0.8899 Brazil - Malaysia 0.4762 0.178 Inf 2.674 0.0805 CaboVerde - Spain -0.7981 0.183 Inf -4.365 0.0002 CaboVerde - Denmark -0.6603 0.183 Inf -3.604 0.0042 CaboVerde - Malaysia -0.3751 0.184 Inf -2.036 0.3215 Spain - Denmark 0.1378 0.180 Inf 0.766 0.9732 Spain - Malaysia 0.4230 0.181 Inf 2.337 0.1794 Denmark - Malaysia 0.2852 0.181 Inf 1.572 0.6172 Results are given on the log (not the response) scale. P value adjustment: tukey method for comparing a family of 6 estimates Neutral Modelq1_Loca &lt;- lm(formula = neutral ~ location, data = alpha_div_meta) anova(Modelq1_Loca) Analysis of Variance Table Response: neutral Df Sum Sq Mean Sq F value Pr(&gt;F) location 5 2438.6 487.72 5.1405 0.0003575 *** Residuals 86 8159.6 94.88 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 r.squaredGLMM(Modelq1_Loca) R2m R2c [1,] 0.2202391 0.2202391 emmeans(Modelq1_Loca, pairwise ~ location) $emmeans location emmean SE df lower.CL upper.CL Aruba 11.8 2.44 86 6.98 16.7 Brazil 25.0 2.44 86 20.19 29.9 CaboVerde 15.2 2.52 86 10.22 20.2 Spain 24.8 2.52 86 19.75 29.8 Denmark 20.5 2.52 86 15.51 25.5 Malaysia 24.4 2.52 86 19.35 29.4 Confidence level used: 0.95 $contrasts contrast estimate SE df t.ratio p.value Aruba - Brazil -13.208 3.44 86 -3.835 0.0032 Aruba - CaboVerde -3.402 3.50 86 -0.972 0.9257 Aruba - Spain -12.930 3.50 86 -3.693 0.0051 Aruba - Denmark -8.683 3.50 86 -2.480 0.1415 Aruba - Malaysia -12.532 3.50 86 -3.580 0.0073 Brazil - CaboVerde 9.806 3.50 86 2.801 0.0669 Brazil - Spain 0.278 3.50 86 0.080 1.0000 Brazil - Denmark 4.525 3.50 86 1.292 0.7884 Brazil - Malaysia 0.676 3.50 86 0.193 1.0000 CaboVerde - Spain -9.528 3.56 86 -2.679 0.0901 CaboVerde - Denmark -5.282 3.56 86 -1.485 0.6747 CaboVerde - Malaysia -9.131 3.56 86 -2.567 0.1168 Spain - Denmark 4.246 3.56 86 1.194 0.8387 Spain - Malaysia 0.397 3.56 86 0.112 1.0000 Denmark - Malaysia -3.849 3.56 86 -1.082 0.8872 P value adjustment: tukey method for comparing a family of 6 estimates Phylogenetic Modelq1p_Loca &lt;- lm(formula = phylogenetic ~ location, data = alpha_div_meta) anova(Modelq1p_Loca) Analysis of Variance Table Response: phylogenetic Df Sum Sq Mean Sq F value Pr(&gt;F) location 5 24.581 4.9161 2.2328 0.05818 . Residuals 86 189.353 2.2018 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 r.squaredGLMM(Modelq1p_Loca) R2m R2c [1,] 0.109275 0.109275 emmeans(Modelq1p_Loca, pairwise ~ location) $emmeans location emmean SE df lower.CL upper.CL Aruba 5.52 0.371 86 4.78 6.26 Brazil 6.32 0.371 86 5.58 7.06 CaboVerde 6.98 0.383 86 6.22 7.75 Spain 6.44 0.383 86 5.68 7.20 Denmark 5.59 0.383 86 4.83 6.36 Malaysia 6.51 0.383 86 5.75 7.27 Confidence level used: 0.95 $contrasts contrast estimate SE df t.ratio p.value Aruba - Brazil -0.7978 0.525 86 -1.521 0.6520 Aruba - CaboVerde -1.4627 0.533 86 -2.743 0.0773 Aruba - Spain -0.9184 0.533 86 -1.722 0.5211 Aruba - Denmark -0.0725 0.533 86 -0.136 1.0000 Aruba - Malaysia -0.9877 0.533 86 -1.852 0.4386 Brazil - CaboVerde -0.6649 0.533 86 -1.247 0.8125 Brazil - Spain -0.1206 0.533 86 -0.226 0.9999 Brazil - Denmark 0.7253 0.533 86 1.360 0.7505 Brazil - Malaysia -0.1899 0.533 86 -0.356 0.9992 CaboVerde - Spain 0.5442 0.542 86 1.004 0.9153 CaboVerde - Denmark 1.3901 0.542 86 2.566 0.1172 CaboVerde - Malaysia 0.4750 0.542 86 0.877 0.9511 Spain - Denmark 0.8459 0.542 86 1.561 0.6260 Spain - Malaysia -0.0692 0.542 86 -0.128 1.0000 Denmark - Malaysia -0.9151 0.542 86 -1.689 0.5428 P value adjustment: tukey method for comparing a family of 6 estimates Functional Modelq1F_Loca &lt;- lm(formula = functional ~ location, data = alpha_div_meta) anova(Modelq1F_Loca) Analysis of Variance Table Response: functional Df Sum Sq Mean Sq F value Pr(&gt;F) location 5 0.06044 0.0120886 2.3531 0.04726 * Residuals 86 0.44181 0.0051373 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 r.squaredGLMM(Modelq1F_Loca) R2m R2c [1,] 0.1144882 0.1144882 emmeans(Modelq1F_Loca, pairwise ~ location) $emmeans location emmean SE df lower.CL upper.CL Aruba 1.41 0.0179 86 1.37 1.45 Brazil 1.43 0.0179 86 1.39 1.47 CaboVerde 1.46 0.0185 86 1.42 1.50 Spain 1.45 0.0185 86 1.41 1.49 Denmark 1.47 0.0185 86 1.43 1.51 Malaysia 1.49 0.0185 86 1.45 1.52 Confidence level used: 0.95 $contrasts contrast estimate SE df t.ratio p.value Aruba - Brazil -0.02104 0.0253 86 -0.830 0.9611 Aruba - CaboVerde -0.05095 0.0258 86 -1.978 0.3635 Aruba - Spain -0.04197 0.0258 86 -1.629 0.5818 Aruba - Denmark -0.05914 0.0258 86 -2.296 0.2071 Aruba - Malaysia -0.07819 0.0258 86 -3.035 0.0363 Brazil - CaboVerde -0.02991 0.0258 86 -1.161 0.8539 Brazil - Spain -0.02093 0.0258 86 -0.812 0.9645 Brazil - Denmark -0.03810 0.0258 86 -1.479 0.6784 Brazil - Malaysia -0.05714 0.0258 86 -2.218 0.2402 CaboVerde - Spain 0.00898 0.0262 86 0.343 0.9994 CaboVerde - Denmark -0.00820 0.0262 86 -0.313 0.9996 CaboVerde - Malaysia -0.02724 0.0262 86 -1.041 0.9027 Spain - Denmark -0.01717 0.0262 86 -0.656 0.9861 Spain - Malaysia -0.03622 0.0262 86 -1.384 0.7365 Denmark - Malaysia -0.01904 0.0262 86 -0.728 0.9780 P value adjustment: tukey method for comparing a family of 6 estimates 5.2 By behaviour and location 5.2.1 Plots Richness alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata, by = &quot;sample&quot;) %&gt;% filter(!is.na(location)) %&gt;% filter(metric==&quot;richness&quot;) %&gt;% ggplot(aes(y = value, x = origin, group=origin, color=origin, fill=origin)) + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.1, alpha=0.5) + scale_color_manual(values = origin_colors) + scale_fill_manual(values = str_c(origin_colors, &quot;50&quot;)) + facet_wrap(. ~ location, scales = &quot;fixed&quot;, ncol=6) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) Neutral #pdf(&quot;figures/alpha_q1n_behaviour.pdf&quot;,width=9, height=5) alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata, by = &quot;sample&quot;) %&gt;% filter(!is.na(location)) %&gt;% filter(metric==&quot;neutral&quot;) %&gt;% ggplot(aes(y = value, x = origin, group=origin, color=origin, fill=origin)) + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.1, alpha=0.5) + scale_color_manual(values = origin_colors) + scale_fill_manual(values = str_c(origin_colors, &quot;50&quot;)) + facet_wrap(. ~ location, scales = &quot;fixed&quot;, ncol=6) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #dev.off() Phylogenetic #pdf(&quot;figures/alpha_q1p_behaviour.pdf&quot;,width=9, height=5) alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata, by = &quot;sample&quot;) %&gt;% filter(!is.na(location)) %&gt;% filter(metric==&quot;phylogenetic&quot;) %&gt;% ggplot(aes(y = value, x = origin, group=origin, color=origin, fill=origin)) + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.1, alpha=0.5) + scale_color_manual(values = origin_colors) + scale_fill_manual(values = str_c(origin_colors, &quot;50&quot;)) + facet_wrap(. ~ location, scales = &quot;fixed&quot;, ncol=6) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #dev.off() Functional alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata, by = &quot;sample&quot;) %&gt;% filter(!is.na(location)) %&gt;% filter(metric==&quot;functional&quot;) %&gt;% ggplot(aes(y = value, x = origin, group=origin, color=origin, fill=origin)) + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.1, alpha=0.5) + scale_color_manual(values = origin_colors) + scale_fill_manual(values = str_c(origin_colors, &quot;50&quot;)) + facet_wrap(. ~ location, scales = &quot;fixed&quot;, ncol=6) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) 5.2.2 Mixed models Richness Model_richness &lt;- glmer.nb(richness ~ origin+sex+(1|location), data = alpha_div_meta) summary(Model_richness) Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) [&#39;glmerMod&#39;] Family: Negative Binomial(4.2906) ( log ) Formula: richness ~ origin + sex + (1 | location) Data: alpha_div_meta AIC BIC logLik deviance df.resid 857.1 872.2 -422.5 845.1 86 Scaled residuals: Min 1Q Median 3Q Max -1.6859 -0.6041 -0.0643 0.5858 3.2671 Random effects: Groups Name Variance Std.Dev. location (Intercept) 0.1653 0.4065 Number of obs: 92, groups: location, 6 Fixed effects: Estimate Std. Error z value Pr(&gt;|z|) (Intercept) 3.90133 0.19455 20.053 &lt;2e-16 *** originFeral 0.00238 0.10976 0.022 0.983 sexMale -0.25024 0.11805 -2.120 0.034 * sexUnknown 0.23928 0.36462 0.656 0.512 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Correlation of Fixed Effects: (Intr) orgnFr sexMal originFeral -0.228 sexMale -0.260 0.044 sexUnknown -0.281 -0.113 0.076 Neutral Model_neutral &lt;- lme(fixed = neutral ~ origin+sex, data = alpha_div_meta, random = ~ 1 | location)#log(seq_depth)+ summary(Model_neutral) Linear mixed-effects model fit by REML Data: alpha_div_meta AIC BIC logLik 680.5938 695.4578 -334.2969 Random effects: Formula: ~1 | location (Intercept) Residual StdDev: 5.311173 9.630345 Fixed effects: neutral ~ origin + sex Value Std.Error DF t-value p-value (Intercept) 20.948125 2.856806 83 7.332709 0.0000 originFeral 1.703197 2.090004 83 0.814925 0.4174 sexMale -4.147994 2.232360 83 -1.858120 0.0667 sexUnknown 0.883327 5.749323 83 0.153640 0.8783 Correlation: (Intr) orgnFr sexMal originFeral -0.306 sexMale -0.352 0.058 sexUnknown -0.309 -0.117 0.121 Standardized Within-Group Residuals: Min Q1 Med Q3 Max -1.9366916 -0.6727309 -0.1549049 0.6419273 2.8015816 Number of Observations: 92 Number of Groups: 6 Phylogenetic Model_phylo &lt;- lme(fixed = phylogenetic ~ origin+sex, data = alpha_div_meta, random = ~ 1 | location) summary(Model_phylo) Linear mixed-effects model fit by REML Data: alpha_div_meta AIC BIC logLik 345.8789 360.7429 -166.9394 Random effects: Formula: ~1 | location (Intercept) Residual StdDev: 0.3796989 1.473687 Fixed effects: phylogenetic ~ origin + sex Value Std.Error DF t-value p-value (Intercept) 6.599600 0.3116529 83 21.176119 0.0000 originFeral 0.019084 0.3174909 83 0.060108 0.9522 sexMale -0.621959 0.3392944 83 -1.833097 0.0704 sexUnknown -0.955378 0.6039183 83 -1.581965 0.1175 Correlation: (Intr) orgnFr sexMal originFeral -0.442 sexMale -0.507 0.060 sexUnknown -0.335 -0.124 0.225 Standardized Within-Group Residuals: Min Q1 Med Q3 Max -1.86150185 -0.62279155 0.02054232 0.74108402 2.09713515 Number of Observations: 92 Number of Groups: 6 Functional Model_func &lt;- lme(fixed = functional ~ origin+sex, data = alpha_div_meta, random = ~ 1 | location) summary(Model_func) Linear mixed-effects model fit by REML Data: alpha_div_meta AIC BIC logLik -186.0933 -171.2292 99.04663 Random effects: Formula: ~1 | location (Intercept) Residual StdDev: 0.02356286 0.0712589 Fixed effects: functional ~ origin + sex Value Std.Error DF t-value p-value (Intercept) 1.4453479 0.01635760 83 88.35944 0.0000 originFeral 0.0194761 0.01539254 83 1.26530 0.2093 sexMale -0.0148974 0.01644558 83 -0.90586 0.3676 sexUnknown 0.0178121 0.03256538 83 0.54696 0.5859 Correlation: (Intr) orgnFr sexMal originFeral -0.404 sexMale -0.465 0.059 sexUnknown -0.330 -0.121 0.192 Standardized Within-Group Residuals: Min Q1 Med Q3 Max -2.0213571 -0.6393834 0.0797046 0.5702719 3.7232590 Number of Observations: 92 Number of Groups: 6 "],["beta-diversity.html", "Chapter 6 Beta diversity 6.1 location 6.2 Behaviour", " Chapter 6 Beta diversity load(&quot;data/data.Rdata&quot;) beta_q0n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% dplyr::select_if(~!all(. == 0)) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% dplyr::select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1) beta_q1p &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% dplyr::select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, tree = genome_tree) beta_q1f &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% dplyr::select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, dist = dist) 6.1 location 6.1.1 Richness diversity betadisper(beta_q0n$S, sample_metadata$location) %&gt;% permutest(., pairwise=TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 5 0.51463 0.102926 11.076 999 0.001 *** Residuals 86 0.79917 0.009293 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Aruba Brazil CaboVerde Spain Denmark Malaysia Aruba 1.0000e-03 2.0000e-03 1.0000e-03 1.0000e-03 0.010 Brazil 8.1559e-05 1.1500e-01 7.1000e-02 9.1900e-01 0.135 CaboVerde 6.2922e-04 1.1254e-01 1.0000e-03 2.6000e-02 0.930 Spain 1.7363e-12 7.3505e-02 3.5940e-05 2.7000e-02 0.002 Denmark 1.3206e-07 9.0556e-01 2.9720e-02 2.3526e-02 0.059 Malaysia 9.6128e-03 1.3730e-01 9.2726e-01 4.6570e-04 5.9273e-02 adonis2(beta_q0n$S ~ location, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q0n$S))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() tinytable_zajgxab6lx1s0nevdg7i .table td.tinytable_css_fko5zd8hvo22l3r3an5b, .table th.tinytable_css_fko5zd8hvo22l3r3an5b { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value location 5 6.57607 0.2442751 5.559605 0.001 Residual 86 20.34468 0.7557249 NA NA Total 91 26.92075 1.0000000 NA NA pairwise.adonis(beta_q0n$S, sample_metadata$location, perm = 999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 Aruba vs Brazil 1 2.0520609 7.280171 0.19528265 0.001 0.015 . 2 Aruba vs CaboVerde 1 1.0026264 3.213494 0.09975614 0.001 0.015 . 3 Aruba vs Denmark 1 1.9513181 7.018855 0.19486614 0.001 0.015 . 4 Aruba vs Malaysia 1 1.1650328 3.678697 0.11257172 0.001 0.015 . 5 Aruba vs Spain 1 2.0433431 8.167535 0.21974917 0.001 0.015 . 6 Brazil vs CaboVerde 1 2.1090004 9.164611 0.24013374 0.001 0.015 . 7 Brazil vs Denmark 1 0.5703370 2.907951 0.09113563 0.001 0.015 . 8 Brazil vs Malaysia 1 0.9283278 3.953419 0.11996993 0.001 0.015 . 9 Brazil vs Spain 1 0.6343957 3.769479 0.11503016 0.001 0.015 . 10 CaboVerde vs Denmark 1 1.8099512 8.070070 0.22373314 0.001 0.015 . 11 CaboVerde vs Malaysia 1 1.2143821 4.593887 0.14094322 0.001 0.015 . 12 CaboVerde vs Spain 1 1.8141430 9.281722 0.24896172 0.001 0.015 . 13 Denmark vs Malaysia 1 1.0124763 4.418610 0.13629855 0.001 0.015 . 14 Denmark vs Spain 1 0.5305346 3.310771 0.10573905 0.001 0.015 . 15 Malaysia vs Spain 1 0.8450695 4.218747 0.13094076 0.001 0.015 . #pdf(&quot;figures/beta_q0_loca.pdf&quot;,width=9, height=5) beta_q0n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = &quot;sample&quot;) %&gt;% group_by(location) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = location, fill = location)) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + scale_color_manual(values = location_colors)+ theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) #dev.off() 6.1.2 Neutral diversity betadisper(beta_q1n$S, sample_metadata$location) %&gt;% permutest(., pairwise=TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 5 0.2728 0.054560 3.7079 999 0.003 ** Residuals 86 1.2654 0.014715 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Aruba Brazil CaboVerde Spain Denmark Malaysia Aruba 9.0000e-03 1.0000e-03 1.0000e-03 2.0000e-03 0.002 Brazil 9.2383e-03 7.7300e-01 2.0900e-01 6.5800e-01 0.872 CaboVerde 7.7521e-04 7.7033e-01 2.8900e-01 8.7700e-01 0.905 Spain 1.6646e-05 2.2327e-01 3.0424e-01 3.7300e-01 0.262 Denmark 3.3254e-04 6.6322e-01 8.7642e-01 3.7291e-01 0.795 Malaysia 1.1422e-03 8.5989e-01 8.9763e-01 2.4754e-01 7.7435e-01 adonis2(beta_q1n$S ~ location, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$S))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() tinytable_apzn0gnb4my9gnawws7p .table td.tinytable_css_iaarc3s4uoy60el5ih9d, .table th.tinytable_css_iaarc3s4uoy60el5ih9d { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value location 5 5.709562 0.221304 4.88821 0.001 Residual 86 20.090068 0.778696 NA NA Total 91 25.799630 1.000000 NA NA pairwise.adonis(beta_q1n$S, sample_metadata$location, perm = 999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 Aruba vs Brazil 1 1.3739907 4.789154 0.13766227 0.001 0.015 . 2 Aruba vs CaboVerde 1 1.0636589 3.806728 0.11603497 0.001 0.015 . 3 Aruba vs Denmark 1 1.6037782 5.813780 0.16699651 0.001 0.015 . 4 Aruba vs Malaysia 1 1.2584980 4.466640 0.13346545 0.001 0.015 . 5 Aruba vs Spain 1 1.4382789 5.558030 0.16083181 0.001 0.015 . 6 Brazil vs CaboVerde 1 1.5901673 7.027154 0.19505161 0.001 0.015 . 7 Brazil vs Denmark 1 0.6954159 3.122217 0.09719804 0.004 0.060 8 Brazil vs Malaysia 1 0.7313843 3.199010 0.09935119 0.001 0.015 . 9 Brazil vs Spain 1 0.4007935 1.948927 0.06297236 0.033 0.495 10 CaboVerde vs Denmark 1 1.8198218 8.556140 0.23405480 0.001 0.015 . 11 CaboVerde vs Malaysia 1 1.3171418 6.019861 0.17695136 0.001 0.015 . 12 CaboVerde vs Spain 1 1.5415454 7.905417 0.22017337 0.001 0.015 . 13 Denmark vs Malaysia 1 1.0691578 4.970172 0.15074753 0.001 0.015 . 14 Denmark vs Spain 1 0.5766622 3.014217 0.09718823 0.002 0.030 . 15 Malaysia vs Spain 1 0.6446972 3.265586 0.10444666 0.002 0.030 . #pdf(&quot;figures/beta_q1n_loca.pdf&quot;,width=9, height=5) beta_q1n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = &quot;sample&quot;) %&gt;% group_by(location) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = location, fill = location)) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + scale_color_manual(values = location_colors)+ theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) #dev.off() 6.1.3 Phylogenetic diversity betadisper(beta_q1p$S, sample_metadata$location) %&gt;% permutest(., pairwise=TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 5 0.2152 0.04304 2.1047 999 0.081 . Residuals 86 1.7587 0.02045 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Aruba Brazil CaboVerde Spain Denmark Malaysia Aruba 0.06000000 0.04600000 0.00200000 0.11100000 0.005 Brazil 0.06236518 0.87300000 0.32400000 0.65100000 0.712 CaboVerde 0.05279004 0.86912737 0.24300000 0.76500000 0.545 Spain 0.00060645 0.32391452 0.20693940 0.12100000 0.514 Denmark 0.09811567 0.63811338 0.73976492 0.10108967 0.324 Malaysia 0.00519311 0.67845753 0.52055144 0.50696000 0.31212601 adonis2(beta_q1p$S ~ location, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1p$S))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() tinytable_2obm62g1hrse9tdrc7f0 .table td.tinytable_css_qg7mzvag0xlv8m3gmwlb, .table th.tinytable_css_qg7mzvag0xlv8m3gmwlb { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value location 5 2.690791 0.2683828 6.309563 0.001 Residual 86 7.335152 0.7316172 NA NA Total 91 10.025944 1.0000000 NA NA pairwise.adonis(beta_q1p$S, sample_metadata$location, perm = 999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 Aruba vs Brazil 1 0.64714035 6.1133065 0.16928127 0.001 0.015 . 2 Aruba vs CaboVerde 1 0.56229778 5.3504131 0.15575979 0.001 0.015 . 3 Aruba vs Denmark 1 1.03758657 9.5591181 0.24790811 0.001 0.015 . 4 Aruba vs Malaysia 1 0.48047063 5.0352414 0.14794199 0.001 0.015 . 5 Aruba vs Spain 1 0.60047832 6.7919744 0.18976250 0.001 0.015 . 6 Brazil vs CaboVerde 1 0.70961443 8.1023431 0.21837821 0.001 0.015 . 7 Brazil vs Denmark 1 0.32742702 3.5968626 0.11034383 0.025 0.375 8 Brazil vs Malaysia 1 0.19570506 2.5119802 0.07971509 0.028 0.420 9 Brazil vs Spain 1 0.06456161 0.9106384 0.03044530 0.456 1.000 10 CaboVerde vs Denmark 1 1.07120011 11.9405505 0.29895808 0.001 0.015 . 11 CaboVerde vs Malaysia 1 0.50032095 6.5728056 0.19011490 0.002 0.030 . 12 CaboVerde vs Spain 1 0.82104026 11.9236999 0.29866220 0.001 0.015 . 13 Denmark vs Malaysia 1 0.54258755 6.8084757 0.19559821 0.001 0.015 . 14 Denmark vs Spain 1 0.24626102 3.3999417 0.10827860 0.019 0.285 15 Malaysia vs Spain 1 0.26932060 4.5771932 0.14050299 0.001 0.015 . #pdf(&quot;figures/beta_q1p_loca.pdf&quot;,width=9, height=5) beta_q1p$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = &quot;sample&quot;) %&gt;% group_by(location) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = location, fill = location)) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + scale_color_manual(values = location_colors)+ theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) #dev.off() 6.1.4 Functional diversity betadisper(beta_q1f$S, sample_metadata$location) %&gt;% permutest(., pairwise=TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 5 1.5016 0.300325 9.1732 999 0.001 *** Residuals 86 2.8156 0.032739 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Aruba Brazil CaboVerde Spain Denmark Malaysia Aruba 2.0000e-03 5.9800e-01 1.0000e-03 1.0000e-03 0.475 Brazil 8.6955e-04 4.0000e-03 6.9600e-01 2.4600e-01 0.002 CaboVerde 5.8936e-01 9.7727e-04 3.0000e-03 1.0000e-03 0.893 Spain 1.5125e-03 6.8358e-01 1.5804e-03 3.7000e-02 0.002 Denmark 1.7539e-04 2.3957e-01 9.2505e-05 3.3658e-02 0.001 Malaysia 4.9615e-01 1.0071e-03 8.8292e-01 1.5959e-03 7.4748e-05 adonis2(beta_q1f$S ~ location, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1f$S))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() tinytable_oj5nfjjy0ypeq9ia43lf .table td.tinytable_css_pp51sdh7f37yrpcz4540, .table th.tinytable_css_pp51sdh7f37yrpcz4540 { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value location 5 8.815599 0.5844961 24.19552 0.001 Residual 86 6.266793 0.4155039 NA NA Total 91 15.082391 1.0000000 NA NA pairwise.adonis(beta_q1f$S, sample_metadata$location, perm = 999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 Aruba vs Brazil 1 3.77109355 40.6261637 0.575228238 0.001 0.015 . 2 Aruba vs CaboVerde 1 0.81599223 5.5801053 0.161367505 0.008 0.120 3 Aruba vs Denmark 1 4.54372380 50.8948430 0.637022880 0.001 0.015 . 4 Aruba vs Malaysia 1 0.87672195 6.0397240 0.172367910 0.007 0.105 5 Aruba vs Spain 1 3.49955224 36.9984243 0.560595570 0.001 0.015 . 6 Brazil vs CaboVerde 1 1.79573937 27.7696018 0.489163230 0.001 0.015 . 7 Brazil vs Denmark 1 0.27026868 35.0545409 0.547260825 0.001 0.015 . 8 Brazil vs Malaysia 1 1.69391038 26.6369446 0.478763612 0.001 0.015 . 9 Brazil vs Spain 1 -0.01258568 -0.9666596 -0.034482498 0.946 1.000 10 CaboVerde vs Denmark 1 2.85656348 47.6207158 0.629731090 0.001 0.015 . 11 CaboVerde vs Malaysia 1 -0.02164970 -0.1836835 -0.006603446 0.984 1.000 12 CaboVerde vs Spain 1 1.56212224 23.8545897 0.460028512 0.001 0.015 . 13 Denmark vs Malaysia 1 2.82610262 48.0023359 0.631590271 0.001 0.015 . 14 Denmark vs Spain 1 0.38029019 58.5480612 0.676480332 0.001 0.015 . 15 Malaysia vs Spain 1 1.47580731 22.9256154 0.450178466 0.001 0.015 . #pdf(&quot;figures/beta_q1f_loca.pdf&quot;,width=9, height=5) beta_q1f$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = &quot;sample&quot;) %&gt;% group_by(location) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = location, fill = location)) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + scale_color_manual(values = location_colors)+ theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) #dev.off() 6.2 Behaviour 6.2.1 Richness diversity betadisper(beta_q0n$S, sample_metadata$origin) %&gt;% permutest(., pairwise=TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 0.00411 0.0041147 0.2442 999 0.602 Residuals 90 1.51634 0.0168483 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Domestic Feral Domestic 0.6 Feral 0.62238 adonis2(beta_q0n$S ~ origin, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q0n$S))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$S))) %&gt;% pull(location)) %&gt;% broom::tidy() %&gt;% tt() tinytable_6y1a7etmclesotfdlyw8 .table td.tinytable_css_ebhbo4y392o6hkjfn224, .table th.tinytable_css_ebhbo4y392o6hkjfn224 { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value origin 1 0.4407951 0.0163738 1.498173 0.194 Residual 90 26.4799587 0.9836262 NA NA Total 91 26.9207538 1.0000000 NA NA pairwise.adonis(beta_q0n$S, sample_metadata$origin, perm = 999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 Domestic vs Feral 1 0.4407951 1.498173 0.0163738 0.084 0.084 beta_q0n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(origin) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = origin, fill = origin)) + geom_point(size = 4) + scale_color_manual(values = origin_colors) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) 6.2.2 Neutral diversity betadisper(beta_q1n$S, sample_metadata$origin) %&gt;% permutest(., pairwise=TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 0.0080 0.0080048 0.5581 999 0.464 Residuals 90 1.2909 0.0143435 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Domestic Feral Domestic 0.465 Feral 0.45698 adonis2(beta_q1n$S ~ origin, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$S))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$S))) %&gt;% pull(location)) %&gt;% broom::tidy() %&gt;% tt() tinytable_e65saj8alisk0e6io1ql .table td.tinytable_css_zp6f0foie135p5v1k4tb, .table th.tinytable_css_zp6f0foie135p5v1k4tb { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value origin 1 0.386668 0.01498735 1.369385 0.302 Residual 90 25.412962 0.98501265 NA NA Total 91 25.799630 1.00000000 NA NA pairwise.adonis(beta_q1n$S, sample_metadata$origin, perm = 999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 Domestic vs Feral 1 0.386668 1.369385 0.01498735 0.142 0.142 pdf(&quot;figures/beta_q1n_behaviour.pdf&quot;,width=9, height=5) beta_q1n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(origin) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = origin, fill = origin)) + geom_point(size = 4) + scale_color_manual(values = origin_colors) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) dev.off() quartz_off_screen 2 6.2.3 Phylogenetic diversity betadisper(beta_q1p$S, sample_metadata$origin) %&gt;% permutest(., pairwise=TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 0.01229 0.012295 0.5442 999 0.451 Residuals 90 2.03337 0.022593 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Domestic Feral Domestic 0.452 Feral 0.46262 adonis2(beta_q1p$S ~ origin, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1p$S))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$S))) %&gt;% pull(location)) %&gt;% broom::tidy() %&gt;% tt() tinytable_498ozusnfynuhw5x3bp7 .table td.tinytable_css_wbpzz6xtoadp3al4bway, .table th.tinytable_css_wbpzz6xtoadp3al4bway { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value origin 1 0.2191073 0.02185403 2.010807 0.183 Residual 90 9.8068363 0.97814597 NA NA Total 91 10.0259435 1.00000000 NA NA pairwise.adonis(beta_q1p$S, sample_metadata$origin, perm = 999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 Domestic vs Feral 1 0.2191073 2.010807 0.02185403 0.073 0.073 beta_q1p$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(origin) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = origin, fill = origin)) + geom_point(size = 4) + scale_color_manual(values = origin_colors) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) 6.2.4 Functional diversity betadisper(beta_q1f$S, sample_metadata$origin) %&gt;% permutest(., pairwise=TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 0.2486 0.248604 3.3502 999 0.058 . Residuals 90 6.6786 0.074206 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Domestic Feral Domestic 0.061 Feral 0.070508 adonis2(beta_q1f$S ~ origin, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1f$S))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$S))) %&gt;% pull(location)) %&gt;% broom::tidy() %&gt;% tt() tinytable_0cz1qr3syj1pso6fb5i0 .table td.tinytable_css_craewdj9n10bkblmyw2m, .table th.tinytable_css_craewdj9n10bkblmyw2m { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value origin 1 0.3816603 0.02530502 2.336579 0.198 Residual 90 14.7007312 0.97469498 NA NA Total 91 15.0823914 1.00000000 NA NA pairwise.adonis(beta_q1f$S, sample_metadata$origin, perm = 999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 Domestic vs Feral 1 0.3816603 2.336579 0.02530502 0.11 0.11 beta_q1f$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(origin) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = origin, fill = origin)) + geom_point(size = 4) + scale_color_manual(values = origin_colors) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) "],["hmsc-setup.html", "Chapter 7 HMSC setup 7.1 Setup 7.2 Define formulas of the Hmsc model 7.3 Define and Hmsc models 7.4 Define MCMC 7.5 Generate Hmsc executables 7.6 Fit Hmsc models (in Mjolnir HPC)", " Chapter 7 HMSC setup 7.1 Setup load(&quot;data/data.Rdata&quot;) # Random effects data (study design) StudyDesign &lt;- sample_metadata %&gt;% dplyr::select(sample,location) %&gt;% column_to_rownames(&quot;sample&quot;) %&gt;% mutate(location = factor(location)) # Genome count table (quantitative community data) YData &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . +1 )) %&gt;% #add +1 pseudocount to remove zeros mutate(across(where(is.numeric), ~ . / (genome_metadata$length / 150) )) %&gt;% #transform to genome counts mutate(across(where(is.numeric), ~ log(.) )) %&gt;% #log-transform arrange(genome) %&gt;% column_to_rownames(&quot;genome&quot;) %&gt;% dplyr::select(all_of(row.names(StudyDesign))) %&gt;% #filter only faecal samples as.data.frame() %&gt;% t() # transpose # Fixed effects data (explanatory variables) XData &lt;- sample_metadata %&gt;% column_to_rownames(&quot;sample&quot;) %&gt;% mutate(logseqdepth=read_counts %&gt;% #total log-sequencing depth dplyr::select(all_of(row.names(StudyDesign))) %&gt;% colSums() %&gt;% log() ) %&gt;% mutate(origin = factor(origin)) %&gt;% mutate(sex = factor(sex)) %&gt;% dplyr::select(origin, sex, logseqdepth) # Genome phylogeny PData &lt;- genome_tree 7.2 Define formulas of the Hmsc model # Fixed effects formula XFormula = ~origin + sex + logseqdepth # Study design rL.location = HmscRandomLevel(units = levels(StudyDesign$location)) 7.3 Define and Hmsc models #Define models model1 = Hmsc(Y=YData, XData = XData, XFormula = XFormula, studyDesign = StudyDesign, phyloTree = PData, ranLevels=list(&quot;location&quot;=rL.location), distr = &quot;normal&quot;, YScale = TRUE) #Save list of models as an R object. model_list = list(model1=model1) if (!dir.exists(&quot;hmsc&quot;)){dir.create(&quot;hmsc&quot;)} save(model_list, file = &quot;hmsc/hmsc.Rdata&quot;) Upload hmsc/hmsc.Rdata to the HPC respecting the directory structure. 7.4 Define MCMC # How often to sample the MCMC MCMC_samples_list = 250 # The number of MCMC steps between each recording sample MCMC_thin_list = 10 # The number of MCMC chains to use nChains = 4 7.5 Generate Hmsc executables The next chunk generates shell files for every combination of model, MCMC samples and MCMM thinning, ready to be launched as SLURM jobs. modelchains &lt;- expand.grid(model = names(model_list), sample = MCMC_samples_list, thin = MCMC_thin_list) if (!dir.exists(&quot;hmsc&quot;)){dir.create(&quot;hmsc&quot;)} for(i in c(1:nrow(modelchains))){ modelname=as.character(modelchains[i,1]) sample=modelchains[i,2] thin=modelchains[i,3] executablename &lt;- paste0(&quot;hmsc/exe_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.sh&quot;) fitname &lt;- paste0(&quot;fit_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.Rdata&quot;) convname &lt;- paste0(&quot;conv_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.Rdata&quot;) model &lt;- paste0(&#39;model_list$&#39;,modelname) psrf.beta.name &lt;- paste0(&quot;psrf.beta.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) psrf.gamma.name &lt;- paste0(&quot;psrf.gamma.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) psrf.rho.name &lt;- paste0(&quot;psrf.rho.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) jobname &lt;- paste0(&quot;hmsc_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) minutes &lt;- 1000 code &lt;- sprintf(&quot;#!/bin/bash #SBATCH --job-name=%s # Job name #SBATCH --nodes=1 #SBATCH --ntasks=4 # Run on 4 CPUs #SBATCH --mail-user=antton.alberdi@sund.ku.dk #SBATCH --mem=96gb # Job memory request #SBATCH --time=%d # In minutes # Activate conda environment module load mamba/1.3.1 source activate /maps/projects/mjolnir1/people/jpl786/AMAC001_fibre_trial/hmsc/hmsc_env # Run R script Rscript -e &#39; library(tidyverse) library(Hmsc) # Load formulas and data load(\\&quot;hmsc.Rdata\\&quot;) # Declare placeholders modelname = \\&quot;%s\\&quot; model = %s fitname = \\&quot;%s\\&quot; convname = \\&quot;%s\\&quot; sample = %d thin = %d nchains = %d # Run model fitting m = sampleMcmc(hM = model, samples = sample, thin = thin, adaptNf=rep(ceiling(0.4*sample*thin),model$nr), transient = ceiling(0.5*sample*thin), nChains = nchains, nParallel = nchains) # Run model cross-validation partition &lt;- createPartition(m, nfolds = 5) cv &lt;- computePredictedValues(m, partition=partition, nChains = 4) # Assess chain convergence mpost = convertToCodaObject(m, spNamesNumbers = c(T,F), covNamesNumbers = c(T,F), Beta = TRUE, Gamma = TRUE, V = FALSE, Sigma = FALSE, Rho = TRUE, Eta = FALSE, Lambda = FALSE, Alpha = FALSE, Omega = FALSE, Psi = FALSE, Delta = FALSE) # Convert to CODA object # Fixed effects assign(paste0(\\&quot;psrf.beta.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Beta,multivariate=FALSE)$psrf) # Traits assign(paste0(\\&quot;psrf.gamma.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Gamma,multivariate=FALSE)$psrf) # Phylogeny assign(paste0(\\&quot;psrf.rho.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Rho,multivariate=FALSE)$psrf) # Write convergence data save(%s, %s, %s, file=convname) # Save model fit object save(m, cv, file=fitname) &#39; &quot;, jobname, minutes, modelname, model, fitname, convname, sample, thin, nChains, psrf.beta.name, psrf.gamma.name, psrf.rho.name) writeLines(code, executablename) } Upload the produced hmsc/exe_XXXXX.sh files to the HPC respecting the directory structure. 7.6 Fit Hmsc models (in Mjolnir HPC) Launch the SLURM jobs by using: #Create and define tmpdir tmpdir=&quot;./tmp&quot; mkdir -p &quot;$tmpdir&quot; export TMPDIR=&quot;$tmpdir&quot; #Or launch them one by one only the ones you want to launch sbatch exe_model1_250_10.sh "],["hmsc-analysis.html", "Chapter 8 HMSC analysis 8.1 Load data 8.2 Variance partitioning 8.3 Model fit 8.4 Posterior estimates 8.5 Phylogenetic signal 8.6 Microbiome composition predictions 8.7 Functional predictions", " Chapter 8 HMSC analysis 8.1 Load data load(&quot;data/data.Rdata&quot;) if(!file.exists(&quot;hmsc/fit_model1_250_10.Rdata&quot;)){ download.file(url=&#39;https://sid.erda.dk/share_redirect/A6rm945NbY/fit_model1_250_10.Rdata&#39;, destfile=&#39;hmsc/fit_model1_250_10.Rdata&#39;, method=&#39;curl&#39;) } load(&quot;hmsc/fit_model1_250_10.Rdata&quot;) # Select desired support threshold support_threshold=0.9 negsupport_threshold=1-support_threshold 8.2 Variance partitioning # Compute variance partitioning varpart=computeVariancePartitioning(m) varpart$vals %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;variable&quot;) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(variable=factor(variable, levels=rev(c(&quot;origin&quot;,&quot;sex&quot;,&quot;logseqdepth&quot;,&quot;Random: location&quot;)))) %&gt;% group_by(variable) %&gt;% summarise(mean=mean(value)*100,sd=sd(value)*100) %&gt;% tt() tinytable_v08hxlivxpvh2co1nqyk .table td.tinytable_css_s88ispdofkwvcrpvlivl, .table th.tinytable_css_s88ispdofkwvcrpvlivl { border-bottom: solid 0.1em #d3d8dc; } variable mean sd Random: location 40.1111261 24.825232 logseqdepth 54.0718559 25.120545 sex 4.8180020 5.744219 origin 0.9990159 1.223566 # Basal tree varpart_tree &lt;- genome_tree #Varpart table varpart_table &lt;- varpart$vals %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;variable&quot;) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(genome=factor(genome, levels=rev(varpart_tree$tip.label))) %&gt;% mutate(variable=factor(variable, levels=rev(c(&quot;origin&quot;,&quot;sex&quot;,&quot;logseqdepth&quot;,&quot;Random: location&quot;)))) #Phyla phylum_groups &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;))%&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% varpart_tree$tip.label) %&gt;% arrange(match(genome, varpart_tree$tip.label)) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(phylum) colors_alphabetic &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;))%&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% varpart_tree$tip.label) %&gt;% arrange(match(genome, varpart_tree$tip.label)) %&gt;% dplyr::select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% dplyr::select(colors) %&gt;% pull() # Basal ggtree varpart_tree &lt;- varpart_tree %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum colors next to the tree tips varpart_tree &lt;- gheatmap(varpart_tree, phylum_groups, offset=-0.2, width=0.1, colnames=FALSE) + scale_fill_manual(values=colors_alphabetic)+ labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap varpart_tree &lt;- varpart_tree + new_scale_fill() # Add variance stacked barplot vertical_tree &lt;- varpart_tree + scale_fill_manual(values=c(&quot;#506a96&quot;,&quot;#cccccc&quot;,&quot;#be3e2b&quot;,&quot;#f6de6c&quot;))+ geom_fruit( data=varpart_table, geom=geom_bar, mapping = aes(x=value, y=genome, fill=variable, group=variable), pwidth = 2, offset = 0.05, width= 1, orientation=&quot;y&quot;, stat=&quot;identity&quot;)+ labs(fill=&quot;Variable&quot;) vertical_tree 8.3 Model fit MFCV &lt;- evaluateModelFit(hM=m, predY=cv) mean(MFCV$R2, na.rm = TRUE) [1] 0.524663 genome_fit &lt;- tibble(genome=m$spNames, r2 = MFCV[[2]]) genome_counts_filt %&gt;% mutate_if(is.numeric, ~ . / sum(.)) %&gt;% left_join(genome_fit, by=&quot;genome&quot;) %&gt;% filter(r2&gt;0.5) %&gt;% select(-c(genome,r2)) %&gt;% colSums() %&gt;% hist(main=&quot;Predictive capacity&quot;) var_pred_table &lt;- tibble(mag=m$spNames, pred=MFCV$R2, var_pred=MFCV$R2 * varpart$vals[1,], support=getPostEstimate(hM=m, parName=&quot;Beta&quot;)$support %&gt;% .[2,], estimate=getPostEstimate(hM=m, parName=&quot;Beta&quot;)$mean %&gt;% .[2,]) %&gt;% mutate(enrichment=ifelse(support&gt;=support_threshold,&quot;Feral&quot;,&quot;Neutral&quot;)) %&gt;% mutate(enrichment=ifelse(support&lt;=negsupport_threshold,&quot;Domestic&quot;,enrichment)) var_pred_table %&gt;% ggplot(aes(x=estimate,y=var_pred, color=enrichment))+ geom_point()+ scale_color_manual(values=c(&quot;#bd70ae&quot;,&quot;#949293&quot;,&quot;#ebe8e8&quot;))+ geom_hline(yintercept=0.005, linetype=&quot;dashed&quot;)+ theme_minimal() predictive_mags &lt;- var_pred_table %&gt;% filter(var_pred&gt;=0.005) %&gt;% pull(mag) 8.4 Posterior estimates # Basal tree postestimates_tree &lt;- genome_tree # Posterior estimate table post_beta &lt;- getPostEstimate(hM=m, parName=&quot;Beta&quot;)$support %&gt;% as.data.frame() %&gt;% mutate(variable=m$covNames) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(genome=factor(genome, levels=rev(postestimates_tree$tip.label))) %&gt;% mutate(value = case_when( value &gt;= support_threshold ~ &quot;Positive&quot;, value &lt;= negsupport_threshold ~ &quot;Negative&quot;, TRUE ~ &quot;Neutral&quot;)) %&gt;% mutate(value=factor(value, levels=c(&quot;Positive&quot;,&quot;Neutral&quot;,&quot;Negative&quot;))) %&gt;% pivot_wider(names_from = variable, values_from = value) %&gt;% #select(genome,sp_vulgaris,area_semi,area_urban,sp_vulgarisxarea_semi,sp_vulgarisxarea_urban,season_spring,season_winter,sp_vulgarisxseason_spring,sp_vulgarisxseason_winter) %&gt;% column_to_rownames(var=&quot;genome&quot;) # Genome-specific attributes genome_depth &lt;- genome_counts_filt %&gt;% mutate_if(is.numeric, ~ . / sum(.)) %&gt;% rowwise() %&gt;% mutate(depth = mean(c_across(where(is.numeric)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(genome,depth) #Phylums phylum_groups &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;)) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% postestimates_tree$tip.label) %&gt;% arrange(match(genome, postestimates_tree$tip.label)) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(phylum) colors_alphabetic &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;)) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% postestimates_tree$tip.label) %&gt;% arrange(match(genome, postestimates_tree$tip.label)) %&gt;% dplyr::select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% dplyr::select(colors) %&gt;% pull() # Basal ggtree postestimates_tree &lt;- postestimates_tree %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips postestimates_tree &lt;- gheatmap(postestimates_tree, phylum_groups, offset=-0.2, width=0.1, colnames=FALSE) + scale_fill_manual(values=colors_alphabetic)+ labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap postestimates_tree &lt;- postestimates_tree + new_scale_fill() # Add posterior significant heatmap postestimates_tree &lt;- gheatmap(postestimates_tree, post_beta, offset=0, width=0.5, colnames=TRUE, colnames_position=&quot;top&quot;,colnames_angle=90, colnames_offset_y=1, hjust=0) + scale_fill_manual(values=c(&quot;#be3e2b&quot;,&quot;#f4f4f4&quot;,&quot;#b2b530&quot;))+ labs(fill=&quot;Trend&quot;) postestimates_tree + vexpand(.25, 1) # expand top 8.4.1 Association with cat origin estimate &lt;- getPostEstimate(hM=m, parName=&quot;Beta&quot;)$mean %&gt;% as.data.frame() %&gt;% mutate(variable=m$covNames) %&gt;% filter(variable==&quot;originFeral&quot;) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;mean&quot;) %&gt;% dplyr::select(genome,mean) support &lt;- getPostEstimate(hM=m, parName=&quot;Beta&quot;)$support %&gt;% as.data.frame() %&gt;% mutate(variable=m$covNames) %&gt;% filter(variable==&quot;originFeral&quot;) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;support&quot;) %&gt;% dplyr::select(genome,support) #pdf(&quot;figures/sig_Mags_violin.pdf&quot;,width=10, height=8) inner_join(estimate,support,by=join_by(genome==genome)) %&gt;% mutate(significance=ifelse(support &gt;= 0.9 | support &lt;= 0.1,1,0)) %&gt;% mutate(support=ifelse(mean&lt;0,1-support,support)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% mutate(phylum = ifelse(support &gt; 0.9, phylum, NA)) %&gt;% ggplot(aes(x=mean,y=support,color=phylum))+ geom_point(alpha=0.7, shape=16, size=3)+ scale_color_manual(values = phylum_colors) + geom_vline(xintercept = 0) + xlim(c(-0.4,0.4)) + labs(x = &quot;Beta regression coefficient&quot;, y = &quot;Posterior probability&quot;) + theme_minimal() 8.4.1.1 Associated with domestic cats getPostEstimate(hM=m, parName=&quot;Beta&quot;)$support %&gt;% as.data.frame() %&gt;% mutate(variable=m$covNames) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(trend = case_when( value &gt;= support_threshold ~ &quot;Positive&quot;, value &lt;= negsupport_threshold ~ &quot;Negative&quot;, TRUE ~ &quot;Neutral&quot;)) %&gt;% filter(variable==&quot;originFeral&quot;, trend==&quot;Negative&quot;) %&gt;% arrange(-value) %&gt;% left_join(genome_metadata,by=join_by(genome==genome)) %&gt;% dplyr::select(genome,phylum,class,order,family,species,value) %&gt;% arrange(phylum, class, family, species)%&gt;% paged_table() 8.4.1.2 Associated with feral cats getPostEstimate(hM=m, parName=&quot;Beta&quot;)$support %&gt;% as.data.frame() %&gt;% mutate(variable=m$covNames) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(trend = case_when( value &gt;= support_threshold ~ &quot;Positive&quot;, value &lt;= negsupport_threshold ~ &quot;Negative&quot;, TRUE ~ &quot;Neutral&quot;)) %&gt;% filter(variable==&quot;originFeral&quot;, trend==&quot;Positive&quot;) %&gt;% arrange(value) %&gt;% left_join(genome_metadata,by=join_by(genome==genome)) %&gt;% dplyr::select(genome,phylum,class,order,family,species,value) %&gt;% arrange(phylum,class,family,species)%&gt;% paged_table() 8.5 Phylogenetic signal mpost &lt;- convertToCodaObject(m) quantile(unlist(mpost$Rho), probs = c(.05,.5,.95)) 5% 50% 95% 0.96 0.98 0.99 8.6 Microbiome composition predictions Support values of the cat origin variable per genome are interpreted as enrichment for domestic or feral cats. The most likely microbiome compositions are predicted for domestic and feral cats based on the hmsc models Log-abundance differences between domestic and feral cats are plotted for genomes found enriched for either origin. 8.7 Functional predictions 8.7.0.1 Element level elements_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% as.data.frame() %&gt;% .[predictive_mags,] #keep only predictive mags #Calculate community-level functional traits for predicted communities community_elements &lt;- prediction %&gt;% filter(genome %in% predictive_mags) %&gt;% #keep only predictive mags group_by(origin, genome) %&gt;% mutate(row_id = row_number()) %&gt;% pivot_wider(names_from = genome, values_from = value) %&gt;% ungroup() %&gt;% group_split(row_id) %&gt;% as.list() %&gt;% lapply(., FUN = function(x){x %&gt;% dplyr::select(-row_id) %&gt;% column_to_rownames(var = &quot;origin&quot;) %&gt;% as.data.frame() %&gt;% exp() %&gt;% t() %&gt;% tss() %&gt;% to.community(elements_table,.,GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;origin&quot;) }) element_predictions &lt;- map_dfr(community_elements, function(df) { domestic_values &lt;- df %&gt;% filter(origin == &quot;domestic&quot;) %&gt;% select(-origin) feral_values &lt;- df %&gt;% filter(origin == &quot;feral&quot;) %&gt;% select(-origin) domestic_values - feral_values }) %&gt;% mutate(iteration=c(1:1000)) %&gt;% pivot_longer(!iteration,names_to=&quot;trait&quot;,values_to=&quot;value&quot;) %&gt;% group_by(trait) %&gt;% summarise(mean=mean(value), p1 = quantile(value, probs = 0.1), p9 = quantile(value, probs = 0.9), positive_support = sum(value &gt; 0)/1000, negative_support = sum(value &lt; 0)/1000) %&gt;% arrange(-positive_support) 8.7.0.1.1 Positive associated functions at element level # Positively associated unique_funct_db&lt;- GIFT_db[c(2,4,5,6)] %&gt;% distinct(Code_element, .keep_all = TRUE) element_predictions %&gt;% filter(mean &gt;0) %&gt;% arrange(-positive_support) %&gt;% filter(positive_support&gt;=0.9) %&gt;% left_join(unique_funct_db, by = join_by(trait == Code_element))%&gt;% arrange(Domain,Function)%&gt;% paged_table() 8.7.0.1.2 Negatively associated functions at element level element_predictions %&gt;% filter(mean &lt;0) %&gt;% arrange(-negative_support) %&gt;% filter(negative_support&gt;=0.9) %&gt;% left_join(unique_funct_db, by = join_by(trait == Code_element))%&gt;% arrange(Domain,Function)%&gt;% paged_table() positive &lt;- element_predictions %&gt;% filter(mean &gt;0) %&gt;% arrange(mean) %&gt;% filter(positive_support&gt;=0.9) %&gt;% dplyr::select(-negative_support) %&gt;% rename(support=positive_support) negative &lt;- element_predictions %&gt;% filter(mean &lt;0) %&gt;% arrange(mean) %&gt;% filter(negative_support&gt;=0.9) %&gt;% dplyr::select(-positive_support) %&gt;% rename(support=negative_support) all_elements &lt;- bind_rows(positive,negative) %&gt;% left_join(GIFT_db,by=join_by(trait==Code_element)) %&gt;% mutate(trait=factor(trait,levels=c(rev(positive$trait),rev(negative$trait)))) %&gt;% mutate(Code_function=factor(Code_function)) %&gt;% mutate(element_legend=str_c(trait,&quot; - &quot;,Element)) %&gt;% mutate(function_legend=str_c(Code_function,&quot; - &quot;,Function)) %&gt;% select(trait,mean,p1,p9,element_legend,function_legend) %&gt;% unique() gift_colors &lt;- read_tsv(&quot;data/gift_colors.tsv&quot;) %&gt;% mutate(legend=str_c(Code_function,&quot; - &quot;,Function)) %&gt;% filter(legend %in% all_elements$function_legend) all_elements %&gt;% ggplot(aes(x=mean, y=fct_reorder(element_legend, mean), xmin=p1, xmax=p9, color=function_legend)) + geom_point() + geom_errorbar() + xlim(c(-0.1,0.04)) + geom_vline(xintercept=0) + scale_color_manual(values = gift_colors$Color) + theme_minimal() + labs(x=&quot;Regression coefficient&quot;,y=&quot;Functional trait&quot;) 8.7.0.2 Function level functions_table &lt;- elements_table %&gt;% to.functions(., GIFT_db) %&gt;% as.data.frame() community_functions &lt;- prediction %&gt;% filter(genome %in% predictive_mags) %&gt;% #keep only predictive mags group_by(origin, genome) %&gt;% mutate(row_id = row_number()) %&gt;% pivot_wider(names_from = genome, values_from = value) %&gt;% ungroup() %&gt;% group_split(row_id) %&gt;% as.list() %&gt;% lapply(., FUN = function(x){x %&gt;% dplyr::select(-row_id) %&gt;% column_to_rownames(var = &quot;origin&quot;) %&gt;% as.data.frame() %&gt;% exp() %&gt;% t() %&gt;% tss() %&gt;% to.community(functions_table,.,GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;origin&quot;) }) function_predictions &lt;- map_dfr(community_functions, function(df) { domestic_values &lt;- df %&gt;% filter(origin == &quot;domestic&quot;) %&gt;% select(-origin) feral_values &lt;- df %&gt;% filter(origin == &quot;feral&quot;) %&gt;% select(-origin) domestic_values - feral_values }) %&gt;% mutate(iteration=c(1:1000)) %&gt;% pivot_longer(!iteration,names_to=&quot;trait&quot;,values_to=&quot;value&quot;) %&gt;% group_by(trait) %&gt;% summarise(mean=mean(value), p1 = quantile(value, probs = 0.1), p9 = quantile(value, probs = 0.9), positive_support = sum(value &gt; 0)/1000, negative_support = sum(value &lt; 0)/1000) %&gt;% arrange(-positive_support) # Positively associated function_predictions %&gt;% filter(mean &gt;0) %&gt;% arrange(-positive_support) %&gt;% paged_table() # Negatively associated function_predictions %&gt;% filter(mean &lt;0) %&gt;% arrange(-negative_support) %&gt;% paged_table() positive &lt;- function_predictions %&gt;% filter(mean &gt;0) %&gt;% arrange(mean) %&gt;% filter(positive_support&gt;=0.9) %&gt;% dplyr::select(-negative_support) %&gt;% rename(support=positive_support) negative &lt;- function_predictions %&gt;% filter(mean &lt;0) %&gt;% arrange(mean) %&gt;% filter(negative_support&gt;=0.9) %&gt;% dplyr::select(-positive_support) %&gt;% rename(support=negative_support) all_functions &lt;- function_predictions %&gt;% left_join(GIFT_db,by=join_by(trait==Code_function)) %&gt;% mutate(trait=factor(trait)) %&gt;% mutate(function_legend=str_c(trait,&quot; - &quot;,Function)) %&gt;% select(trait,mean,p1,p9,function_legend) %&gt;% unique() gift_colors &lt;- read_tsv(&quot;data/gift_colors.tsv&quot;) %&gt;% mutate(legend=str_c(Code_function,&quot; - &quot;,Function)) %&gt;% filter(legend %in% all_functions$function_legend) all_functions %&gt;% ggplot(aes(x=mean, y=fct_reorder(function_legend, mean), xmin=p1, xmax=p9, color=function_legend)) + geom_point() + geom_errorbar() + xlim(c(-0.12,0.05)) + geom_vline(xintercept=0) + scale_color_manual(values = gift_colors$Color) + theme_minimal() + labs(x=&quot;Regression coefficient&quot;,y=&quot;Functional trait&quot;) + guides(col = guide_legend(ncol = 1)) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
