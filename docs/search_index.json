[["index.html", "AlberdiLab | Domestic-feral cat metagenomics Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Domestic-feral cat metagenomics Ostaizka Aizpurua1 Antton Alberdi2 2024-05-23 Chapter 1 Introduction This webbook contains all the code used for data analysis in study on the recovery of metagenome‑assembled genomes and derived microbial communities from tame and feral cat faecal samples collected in six countries. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/domestic_feral_cat_metagenomics.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(broom) library(broom.mixed) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(ANCOMBC) library(lme4) library(Hmsc) library(matrixStats) University of Copenhagen, ostaizka.aizpurua@sund.ku.dk↩︎ University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["data-preparation.html", "Chapter 2 Data preparation 2.1 Load data 2.2 Create working objects 2.3 Prepare color scheme 2.4 Prepare a phyloseq object 2.5 Wrap working objects", " Chapter 2 Data preparation 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read_csv(&quot;data/sample_metadata.csv&quot;) %&gt;% rename(sample=CombinedID) 2.1.2 Read counts read_counts &lt;- read_tsv(&quot;data/read_counts.tsv&quot;) %&gt;% rename(genome=1) %&gt;% select(c(&quot;genome&quot;,sample_metadata$sample)) 2.1.3 Genome coverage genome_coverage &lt;- read_tsv(&quot;data/genome_coverage.tsv&quot;) %&gt;% rename(genome=1) %&gt;% select(c(&quot;genome&quot;,sample_metadata$sample)) 2.1.4 Genome metadata genome_metadata &lt;- read_csv(&quot;data/genome_metadata.csv&quot;) %&gt;% mutate(phylum = case_when( phylum == &quot;Actinobacteriota&quot; ~ &quot;Actinomycetota&quot;, phylum == &quot;Firmicutes&quot; ~ &quot;Bacillota&quot;, phylum == &quot;Firmicutes_A&quot; ~ &quot;Bacillota_A&quot;, phylum == &quot;Firmicutes_C&quot; ~ &quot;Bacillota_C&quot;, phylum == &quot;Proteobacteria&quot; ~ &quot;Pseudomonadota&quot;, TRUE ~ phylum)) 2.1.5 Genome tree genome_tree &lt;- read_tree(&quot;data/genome_tree.tre&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_metadata$genome) # keep only MAG tips 2.1.6 Genome annotations genome_annotations &lt;- read_tsv(&quot;data/genome_annotations.tsv.xz&quot;) %&gt;% rename(gene=1, genome=2, contig=3) 2.2 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.1 Filter reads by coverage min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.2 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.2.3 Distill annotations into GIFTs genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19), verbosity=F) 2.3 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;)) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.4 Prepare a phyloseq object phylo_samples &lt;- sample_metadata %&gt;% column_to_rownames(&quot;sample&quot;) %&gt;% sample_data() #convert to phyloseq sample_data object phylo_genome &lt;- genome_counts %&gt;% column_to_rownames(&quot;genome&quot;) %&gt;% otu_table(., taxa_are_rows = TRUE) phylo_taxonomy &lt;- genome_metadata %&gt;% select(c(1,5:10))%&gt;% column_to_rownames(&quot;genome&quot;) %&gt;% as.matrix() %&gt;% tax_table() #convert to phyloseq tax_table object physeq_genome &lt;- phyloseq(phylo_genome, phylo_taxonomy, phylo_samples) physeq_genome_clr &lt;- microbiome::transform(physeq_genome, &#39;clr&#39;) 2.5 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, physeq_genome, physeq_genome_clr, file = &quot;data/data.Rdata&quot;) "],["mag-catalogue.html", "Chapter 3 MAG catalogue 3.1 Genome phylogeny 3.2 Genome quality 3.3 Functional overview 3.4 Functional ordination", " Chapter 3 MAG catalogue load(&quot;data/data.Rdata&quot;) 3.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;)) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.7, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.5, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 3.2 Genome quality tibble(Completeness= paste0(round(genome_metadata$completeness %&gt;% mean(),2), &quot;±&quot;, round(genome_metadata$completeness %&gt;% sd(),2)), Contamination= paste0(round(genome_metadata$contamination %&gt;% mean(),2), &quot;±&quot;, round(genome_metadata$contamination %&gt;% sd(),2))) %&gt;% tt() tinytable_s9tvp58spe42ggf8sdj7 .table td.tinytable_css_7ufobmhlmjxrbpdai9xg, .table th.tinytable_css_7ufobmhlmjxrbpdai9xg { border-bottom: solid 0.1em #d3d8dc; } Completeness Contamination 90.02±7.79 1.32±1.18 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + xlim(c(70,100)) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(70,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 3.3 Functional overview # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 3.4 Functional ordination # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["community-composition.html", "Chapter 4 Community composition 4.1 Taxonomy overview 4.2 Taxonomy boxplot", " Chapter 4 Community composition load(&quot;data/data.Rdata&quot;) 4.1 Taxonomy overview 4.1.1 Stacked barplot genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(count &gt; 0) %&gt;% #filter 0 counts ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_nested(. ~ Location + Origin, scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) 4.1.2 Phylum relative abundances phylum_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_d75c0cn1jebpvi5wjxe8 .table td.tinytable_css_co6mwhgmly6avn3793ag, .table th.tinytable_css_co6mwhgmly6avn3793ag { border-bottom: solid 0.1em #d3d8dc; } phylum mean sd Bacteroidota 0.3174419111 0.183019959 Bacillota_A 0.1950249672 0.120311961 Actinomycetota 0.1816628641 0.164661070 Pseudomonadota 0.0906110310 0.129035667 Campylobacterota 0.0753140001 0.122740598 Bacillota_C 0.0657125307 0.090589426 Bacillota 0.0558322249 0.084087344 Fusobacteriota 0.0169238273 0.036464401 Desulfobacterota 0.0012635896 0.004283801 Cyanobacteria 0.0002130539 0.001747414 phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% select(phylum) %&gt;% pull() phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + geom_jitter(alpha=0.5) + theme_minimal() + theme(legend.position=&quot;none&quot;) + labs(y=&quot;Phylum&quot;,x=&quot;Relative abundance&quot;) 4.1.3 Phylum percentages by behaviour Tame cats tinytable_bsp8hrqfi2q0f3csba4o .table td.tinytable_css_qhxvkmy51ca6p60v2bxb, .table th.tinytable_css_qhxvkmy51ca6p60v2bxb { border-bottom: solid 0.1em #d3d8dc; } Phylum mean sd Bacteroidota 32.56152690 17.0735823 Bacillota_A 19.43901972 9.2325815 Actinomycetota 18.15297600 14.6097544 Pseudomonadota 8.58500960 8.8366787 Campylobacterota 7.99160260 11.4635975 Bacillota_C 7.03812491 9.0283540 Bacillota 4.78213672 6.8948853 Fusobacteriota 1.24402612 1.8499876 Desulfobacterota 0.17332897 0.3125926 Cyanobacteria 0.03224846 0.2207708 Feral cats tinytable_kennm5ihkfrzctik5ka1 .table td.tinytable_css_lxt8efp1yq02p79wetfa, .table th.tinytable_css_lxt8efp1yq02p79wetfa { border-bottom: solid 0.1em #d3d8dc; } Phylum mean sd Bacteroidota 28.216582864 17.60825972 Bacillota_A 24.008928630 11.57531069 Actinomycetota 17.469038917 14.43475736 Pseudomonadota 8.640301288 12.50709604 Bacillota_C 7.456856533 8.95839921 Bacillota 7.173243065 8.66411699 Campylobacterota 4.450683081 6.19179683 Fusobacteriota 2.234878008 4.15301854 Desulfobacterota 0.342681443 0.81138291 Cyanobacteria 0.006806171 0.03760557 4.2 Taxonomy boxplot 4.2.1 Family family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% group_by(family) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_gr2a4ypyl2713hq7dpt7 .table td.tinytable_css_x9n95tygvcr66d2fxwnb, .table th.tinytable_css_x9n95tygvcr66d2fxwnb { border-bottom: solid 0.1em #d3d8dc; } family mean sd Bacteroidaceae 2.957679e-01 0.1794702282 Lachnospiraceae 1.072346e-01 0.0913528566 Coriobacteriaceae 9.631433e-02 0.1009342181 Helicobacteraceae 5.410633e-02 0.1022560566 Megasphaeraceae 3.895540e-02 0.0732948425 Enterobacteriaceae 3.671005e-02 0.1156492986 Bifidobacteriaceae 3.634821e-02 0.0642309973 Succinivibrionaceae 3.534985e-02 0.0599537024 Ruminococcaceae 3.408006e-02 0.0348433297 Actinomycetaceae 3.080463e-02 0.0930244958 Campylobacteraceae 2.120767e-02 0.0374825084 Lactobacillaceae 2.056464e-02 0.0600942736 Fusobacteriaceae 1.692383e-02 0.0364644007 Clostridiaceae 1.655096e-02 0.0573573568 Burkholderiaceae 1.538244e-02 0.0157737872 Atopobiaceae 1.510044e-02 0.0393574894 Erysipelotrichaceae 1.498819e-02 0.0297202782 Porphyromonadaceae 1.231678e-02 0.0490743570 Oscillospiraceae 1.169099e-02 0.0154660823 Dialisteraceae 1.109249e-02 0.0168027270 Peptoniphilaceae 1.027007e-02 0.0377623762 Streptococcaceae 1.009343e-02 0.0465284432 Selenomonadaceae 9.051718e-03 0.0152538557 Acidaminococcaceae 6.612925e-03 0.0134491243 Erysipelatoclostridiaceae 6.598637e-03 0.0107938056 Peptostreptococcaceae 6.477379e-03 0.0101260977 Anaerovoracaceae 4.239616e-03 0.0103079362 Tannerellaceae 3.414585e-03 0.0079108669 Pasteurellaceae 2.963621e-03 0.0184648739 Enterococcaceae 2.804985e-03 0.0085239000 Mycobacteriaceae 2.785187e-03 0.0190576068 Rikenellaceae 2.616836e-03 0.0106713550 Acutalibacteraceae 2.198544e-03 0.0044303862 Marinifilaceae 2.086026e-03 0.0055223355 Butyricicoccaceae 1.463315e-03 0.0031506247 Desulfovibrionaceae 1.263590e-03 0.0042838013 Muribaculaceae 9.291851e-04 0.0040885460 UBA660 6.460679e-04 0.0035734633 Anaerotignaceae 5.353989e-04 0.0025028446 Barnesiellaceae 3.105707e-04 0.0011701232 UMGS124 3.100703e-04 0.0017862741 Gastranaerophilaceae 2.130539e-04 0.0017474140 CAG-508 2.052995e-04 0.0007194205 CAG-239 2.050753e-04 0.0018010322 CAG-826 1.362811e-04 0.0007776869 UBA1381 7.878665e-05 0.0007556950 family_arrange &lt;- family_summary %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% pull() # Per origin family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum)) + scale_color_manual(values=phylum_colors[-8]) + geom_jitter(alpha=0.5) + facet_grid(.~Origin)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) # Per location family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum)) + scale_color_manual(values=phylum_colors[-8]) + geom_jitter(alpha=0.5) + facet_grid(.~Location)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 4.2.2 Genus genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,phylum,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) genus_summary_sort &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) genus_summary_sort %&gt;% tt() tinytable_6ugvbly7d85rw83b4ynw .table td.tinytable_css_xrtu5mwg5t5m9viyxp21, .table th.tinytable_css_xrtu5mwg5t5m9viyxp21 { border-bottom: solid 0.1em #d3d8dc; } genus mean sd Prevotella 1.364856e-01 0.1353999322 Collinsella 9.631433e-02 0.1009342181 Phocaeicola 8.993433e-02 0.0955977240 Bacteroides 5.173169e-02 0.0635714050 Megasphaera 3.869704e-02 0.0730748863 Helicobacter_B 3.657334e-02 0.0843378196 Bifidobacterium 3.634821e-02 0.0642309973 Anaerobiospirillum 3.459305e-02 0.0599454952 Escherichia 3.275523e-02 0.1083759749 Roseburia 2.314992e-02 0.0533913900 Campylobacter_D 2.120767e-02 0.0374825084 Blautia_A 2.051642e-02 0.0231346773 Pauljensenia 1.977626e-02 0.0800352518 Negativibacillus 1.819490e-02 0.0215815280 Prevotellamassilia 1.738141e-02 0.0343949273 Helicobacter_A 1.713427e-02 0.0507397988 Clostridium_P 1.645501e-02 0.0573123071 Fusobacterium_B 1.469492e-02 0.0345732902 Sutterella 1.425550e-02 0.0152994499 Blautia 1.333921e-02 0.0183592066 UBA7748 1.330938e-02 0.0382333948 Porphyromonas_A 1.231678e-02 0.0490743570 Trueperella 1.102837e-02 0.0501260208 Ligilactobacillus 1.038602e-02 0.0327671906 Dialister 1.031903e-02 0.0157533129 Streptococcus 9.357277e-03 0.0446998121 Gemmiger 8.872488e-03 0.0146460260 Holdemanella 8.793459e-03 0.0187067258 Lactobacillus 8.261034e-03 0.0348551627 Clostridium_Q 7.967312e-03 0.0129501748 Ruminococcus_B 7.491864e-03 0.0133624741 Megamonas 6.998825e-03 0.0128982165 Peptacetobacter 6.477379e-03 0.0101260977 Catenibacterium 6.451673e-03 0.0106973049 Faecalimonas 6.214440e-03 0.0112084591 Faecalibacterium 6.206186e-03 0.0133252461 Bulleidia 6.127964e-03 0.0165765313 Lawsonibacter 5.743270e-03 0.0087015993 Peptoniphilus_A 4.928663e-03 0.0217722683 Acidaminococcus 4.738436e-03 0.0131157898 Eisenbergiella 4.302829e-03 0.0073261825 Plesiomonas 3.954812e-03 0.0176151160 Parabacteroides 3.414585e-03 0.0079108669 Catenibacillus 3.242799e-03 0.0054534742 Histophilus 2.963621e-03 0.0184648739 Alistipes 2.616836e-03 0.0106713550 CAG-81 2.576496e-03 0.0041736848 Mediterraneibacter 2.497312e-03 0.0073570318 Sellimonas 2.293821e-03 0.0042562326 Dysosmobacter 2.255402e-03 0.0038273521 Fusobacterium_A 2.228906e-03 0.0084702675 Mitsuokella 2.052893e-03 0.0089367483 Ruminococcus_A 2.042994e-03 0.0028573373 Corynebacterium 1.947467e-03 0.0162046636 CAG-317 1.827371e-03 0.0032549462 Parolsenella 1.791055e-03 0.0042478478 Odoribacter 1.786646e-03 0.0054424090 Phascolarctobacterium_A 1.773898e-03 0.0045007766 UMGS905 1.691812e-03 0.0039135118 Limosilactobacillus 1.637804e-03 0.0065016504 Flavonifractor 1.526253e-03 0.0030043128 S5-A14a 1.461682e-03 0.0086194900 CAG-110 1.454019e-03 0.0077541828 VUNA01 1.401454e-03 0.0054991752 Butyricicoccus 1.357370e-03 0.0031145926 Enterococcus_B 1.310733e-03 0.0059365102 Schaedlerella 1.305216e-03 0.0026356164 Desulfovibrio 1.146069e-03 0.0040502698 Enterocloster 1.081652e-03 0.0016014566 CAG-521 1.044864e-03 0.0044915406 Robinsoniella 1.000496e-03 0.0022500094 CAG-279 9.291851e-04 0.0040885460 Enterococcus_E 8.894621e-04 0.0052314621 Fusicatenibacter 8.503089e-04 0.0040305315 Lawsonella 8.377194e-04 0.0044649755 Allisonella 7.734581e-04 0.0017636201 Lactococcus 7.361496e-04 0.0045553482 UMGS1370 7.113596e-04 0.0019148297 Lachnospira 6.870854e-04 0.0021298406 Dorea_B 6.868715e-04 0.0019244447 Bariatricus 6.260243e-04 0.0020974371 UBA9502 6.094947e-04 0.0010769033 Enterococcus 6.047896e-04 0.0038126660 UMGS1472 5.927633e-04 0.0010326554 Emergencia 5.805635e-04 0.0012817363 Succinivibrio 5.598203e-04 0.0022589496 Anaerotignum 5.353989e-04 0.0025028446 CAG-877 5.310297e-04 0.0030198616 Hungatella_A 5.159539e-04 0.0024856275 Evtepia 4.179293e-04 0.0010548717 Eubacterium_M 3.872451e-04 0.0020920297 Ruminococcus_C 3.818769e-04 0.0021783041 Anaerobutyricum 3.713931e-04 0.0007790163 Barnesiella 3.105707e-04 0.0011701232 Butyricimonas 2.993807e-04 0.0011821610 UMGS1872 2.941129e-04 0.0019462982 Mobilibacterium 2.870924e-04 0.0013257840 Fournierella 2.796504e-04 0.0011213974 Eubacterium_H 2.754780e-04 0.0018906167 Caecibacter 2.583579e-04 0.0011470773 Clostridium_A 2.543803e-04 0.0019730949 Helicobacter_C 2.498036e-04 0.0018283330 Paraprevotella 2.348920e-04 0.0018824059 Latilactobacillus 2.222007e-04 0.0021312745 Dorea_A 2.150652e-04 0.0015260870 Zag111 2.130539e-04 0.0017474140 CAG-354 2.052995e-04 0.0007194205 CAG-495 2.050753e-04 0.0018010322 Anaerobiospirillum_A 1.969800e-04 0.0010117016 Peptoniphilus_C 1.797556e-04 0.0017241550 Eubacterium_G 1.536509e-04 0.0010434640 Helicobacter_D 1.489164e-04 0.0009489548 Erysipelatoclostridium 1.469635e-04 0.0005908793 Phocea 1.449534e-04 0.0004735835 Ruminococcus_E 1.382618e-04 0.0012752336 UBA4855 1.362811e-04 0.0007776869 CAG-145 1.215784e-04 0.0004454832 Mailhella 1.175204e-04 0.0005162449 CAG-988 1.150383e-04 0.0008178711 Marseille-P4683 1.140905e-04 0.0005092329 AM07-15 1.059455e-04 0.0004745690 Phascolarctobacterium 1.005920e-04 0.0007816980 Clostridium 9.595775e-05 0.0005366982 Anaerostipes 8.894740e-05 0.0004351045 Parasutterella 8.207495e-05 0.0007872353 CAG-41 7.878665e-05 0.0007556950 Absicoccus 6.676847e-05 0.0002502435 Levilactobacillus 5.757608e-05 0.0005522504 genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% filter(genus != &quot;g__&quot;)%&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% pull() #Per day genus_summary %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(genus=factor(genus, levels=rev(genus_summary_sort %&gt;% pull(genus)))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors) + geom_jitter(alpha=0.5) + facet_grid(.~Origin)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) "],["alpha-diversity.html", "Chapter 5 Alpha diversity", " Chapter 5 Alpha diversity load(&quot;data/data.Rdata&quot;) # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) #Richness alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(!is.na(Location)) %&gt;% filter(metric==&quot;richness&quot;) %&gt;% ggplot(aes(y = value, x = Origin, group=Origin, color=Origin, fill=Origin)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Origin&quot;, breaks=c(&quot;Tame&quot;,&quot;Feral&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Origin&quot;, breaks=c(&quot;Tame&quot;,&quot;Feral&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#F3B94250&quot;)) + facet_wrap(. ~ Location, scales = &quot;fixed&quot;, ncol=6) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Neutral alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(!is.na(Location)) %&gt;% filter(metric==&quot;neutral&quot;) %&gt;% ggplot(aes(y = value, x = Origin, group=Origin, color=Origin, fill=Origin)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Origin&quot;, breaks=c(&quot;Tame&quot;,&quot;Feral&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Origin&quot;, breaks=c(&quot;Tame&quot;,&quot;Feral&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#F3B94250&quot;)) + facet_wrap(. ~ Location, scales = &quot;fixed&quot;, ncol=6) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Phylogenetic alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(!is.na(Location)) %&gt;% filter(metric==&quot;phylogenetic&quot;) %&gt;% ggplot(aes(y = value, x = Origin, group=Origin, color=Origin, fill=Origin)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Origin&quot;, breaks=c(&quot;Tame&quot;,&quot;Feral&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Origin&quot;, breaks=c(&quot;Tame&quot;,&quot;Feral&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#F3B94250&quot;)) + facet_wrap(. ~ Location, scales = &quot;fixed&quot;, ncol=6) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Functional alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(!is.na(Location)) %&gt;% filter(metric==&quot;functional&quot;) %&gt;% ggplot(aes(y = value, x = Origin, group=Origin, color=Origin, fill=Origin)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Origin&quot;, breaks=c(&quot;Tame&quot;,&quot;Feral&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Origin&quot;, breaks=c(&quot;Tame&quot;,&quot;Feral&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#F3B94250&quot;)) + facet_wrap(. ~ Location, scales = &quot;fixed&quot;, ncol=6) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) "],["beta-diversity.html", "Chapter 6 Beta diversity", " Chapter 6 Beta diversity load(&quot;data/data.Rdata&quot;) beta_q0n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1) beta_q1p &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, tree = genome_tree) beta_q1f &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, dist = dist) 6.0.1 Permanova #Richness betadisper(beta_q0n$C, sample_metadata$Origin) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 0.00649 0.0064888 0.2231 999 0.669 Residuals 90 2.61727 0.0290808 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Feral Tame Feral 0.67 Tame 0.63781 adonis2(beta_q0n$C ~ Origin, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))) %&gt;% pull(Location)) %&gt;% broom::tidy() %&gt;% tt() tinytable_vpe3cabeqo1k9asl9x5x .table td.tinytable_css_p7aopve2b57ol1g1h2i3, .table th.tinytable_css_p7aopve2b57ol1g1h2i3 { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value Origin 1 0.360299 0.01814891 1.663594 0.212 Residual 90 19.492078 0.98185109 NA NA Total 91 19.852377 1.00000000 NA NA #Neutral diversity betadisper(beta_q1n$C, sample_metadata$Origin) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 0.01097 0.010969 0.5763 999 0.442 Residuals 90 1.71289 0.019032 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Feral Tame Feral 0.446 Tame 0.44974 adonis2(beta_q1n$C ~ Origin, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))) %&gt;% pull(Location)) %&gt;% broom::tidy() %&gt;% tt() tinytable_11x77uyhpnggaztg84zx .table td.tinytable_css_31rq2k6fl420uj6i0awa, .table th.tinytable_css_31rq2k6fl420uj6i0awa { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value Origin 1 0.3587603 0.01623493 1.485257 0.272 Residual 90 21.7392877 0.98376507 NA NA Total 91 22.0980479 1.00000000 NA NA #Phylogenetic diversity betadisper(beta_q1p$C, sample_metadata$Origin) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 0.01235 0.012355 0.6076 999 0.438 Residuals 90 1.83012 0.020335 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Feral Tame Feral 0.432 Tame 0.43775 adonis2(beta_q1p$C ~ Origin, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))) %&gt;% pull(Location)) %&gt;% broom::tidy() %&gt;% tt() tinytable_1sn3n00lwrcnnlotg47m .table td.tinytable_css_44uwp1fdkds2w90v10w5, .table th.tinytable_css_44uwp1fdkds2w90v10w5 { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value Origin 1 0.1824935 0.02489257 2.297522 0.145 Residual 90 7.1487493 0.97510743 NA NA Total 91 7.3312427 1.00000000 NA NA #Functional diversity betadisper(beta_q1f$C, sample_metadata$Origin) %&gt;% permutest(., pairwise = TRUE) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 0.1982 0.198217 2.7199 999 0.077 . Residuals 90 6.5589 0.072877 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Pairwise comparisons: (Observed p-value below diagonal, permuted p-value above diagonal) Feral Tame Feral 0.087 Tame 0.10259 adonis2(beta_q1f$C ~ Origin, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$C))) %&gt;% pull(Location)) %&gt;% broom::tidy() %&gt;% tt() tinytable_kd2m9ugiqhosgvxl7n78 .table td.tinytable_css_xubidkeptql8scxg4nod, .table th.tinytable_css_xubidkeptql8scxg4nod { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value Origin 1 0.3017094 0.02299117 2.117898 0.235 Residual 90 12.8211288 0.97700883 NA NA Total 91 13.1228382 1.00000000 NA NA 6.0.2 Richness diversity plot beta_q0n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(Origin,Location) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = Origin, fill = Origin, shape = as.factor(Location))) + scale_color_manual(name=&quot;Origin&quot;, breaks=c(&quot;Tame&quot;,&quot;Feral&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Origin&quot;, breaks=c(&quot;Tame&quot;,&quot;Feral&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#F3B94250&quot;)) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) 6.0.3 Neutral diversity plot beta_q1n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(Origin,Location) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = Origin, fill = Origin, shape = as.factor(Location))) + scale_color_manual(name=&quot;Origin&quot;, breaks=c(&quot;Tame&quot;,&quot;Feral&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#F3B942&quot;)) + scale_fill_manual(name=&quot;Origin&quot;, breaks=c(&quot;Tame&quot;,&quot;Feral&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#F3B94250&quot;)) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) "],["hmsc-setup.html", "Chapter 7 HMSC setup 7.1 Setup 7.2 Define formulas of the Hmsc model 7.3 Define and Hmsc models 7.4 Define MCMC 7.5 Generate Hmsc executables 7.6 Fit Hmsc models (in Mjolnir HPC)", " Chapter 7 HMSC setup 7.1 Setup load(&quot;data/data.Rdata&quot;) # Random effects data (study design) StudyDesign &lt;- sample_metadata %&gt;% select(sample,Location) %&gt;% rename(location=Location) %&gt;% column_to_rownames(&quot;sample&quot;) %&gt;% mutate(location = factor(location)) # Genome count table (quantitative community data) YData &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . +1 )) %&gt;% #add +1 pseudocount to remove zeros mutate(across(where(is.numeric), ~ . / (genome_metadata$length / 150) )) %&gt;% #transform to genome counts mutate(across(where(is.numeric), ~ log(.) )) %&gt;% #log-transform arrange(genome) %&gt;% column_to_rownames(&quot;genome&quot;) %&gt;% select(all_of(row.names(StudyDesign))) %&gt;% #filter only faecal samples as.data.frame() %&gt;% t() # transpose # Fixed effects data (explanatory variables) XData &lt;- sample_metadata %&gt;% column_to_rownames(&quot;sample&quot;) %&gt;% mutate(logseqdepth=read_counts %&gt;% #total log-sequencing depth select(all_of(row.names(StudyDesign))) %&gt;% colSums() %&gt;% log() ) %&gt;% rename(origin=Origin, sex=F.M) %&gt;% mutate(origin = factor(origin)) %&gt;% mutate(sex = factor(sex)) %&gt;% select(origin, sex, logseqdepth) # Genome phylogeny PData &lt;- genome_tree 7.2 Define formulas of the Hmsc model # Fixed effects formula XFormula = ~origin + sex + logseqdepth # Study design rL.location = HmscRandomLevel(units = levels(StudyDesign$location)) 7.3 Define and Hmsc models #Define models model1 = Hmsc(Y=YData, XData = XData, XFormula = XFormula, studyDesign = StudyDesign, phyloTree = PData, ranLevels=list(&quot;location&quot;=rL.location), distr = &quot;normal&quot;, YScale = TRUE) #Save list of models as an R object. model_list = list(model1=model1) if (!dir.exists(&quot;hmsc&quot;)){dir.create(&quot;hmsc&quot;)} save(model_list, file = &quot;hmsc/hmsc.Rdata&quot;) Upload hmsc/hmsc.Rdata to the HPC respecting the directory structure. 7.4 Define MCMC # How often to sample the MCMC MCMC_samples_list = 250 # The number of MCMC steps between each recording sample MCMC_thin_list = 10 # The number of MCMC chains to use nChains = 4 7.5 Generate Hmsc executables The next chunk generates shell files for every combination of model, MCMC samples and MCMM thinning, ready to be launched as SLURM jobs. modelchains &lt;- expand.grid(model = names(model_list), sample = MCMC_samples_list, thin = MCMC_thin_list) if (!dir.exists(&quot;hmsc&quot;)){dir.create(&quot;hmsc&quot;)} for(i in c(1:nrow(modelchains))){ modelname=as.character(modelchains[i,1]) sample=modelchains[i,2] thin=modelchains[i,3] executablename &lt;- paste0(&quot;hmsc/exe_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.sh&quot;) fitname &lt;- paste0(&quot;fit_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.Rdata&quot;) convname &lt;- paste0(&quot;conv_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.Rdata&quot;) model &lt;- paste0(&#39;model_list$&#39;,modelname) psrf.beta.name &lt;- paste0(&quot;psrf.beta.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) psrf.gamma.name &lt;- paste0(&quot;psrf.gamma.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) psrf.rho.name &lt;- paste0(&quot;psrf.rho.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) jobname &lt;- paste0(&quot;hmsc_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) minutes &lt;- 1000 code &lt;- sprintf(&quot;#!/bin/bash #SBATCH --job-name=%s # Job name #SBATCH --nodes=1 #SBATCH --ntasks=4 # Run on 4 CPUs #SBATCH --mail-user=antton.alberdi@sund.ku.dk #SBATCH --mem=96gb # Job memory request #SBATCH --time=%d # In minutes # Activate conda environment module load mamba/1.3.1 source activate /maps/projects/mjolnir1/people/jpl786/AMAC001_fibre_trial/hmsc/hmsc_env # Run R script Rscript -e &#39; library(tidyverse) library(Hmsc) # Load formulas and data load(\\&quot;hmsc.Rdata\\&quot;) # Declare placeholders modelname = \\&quot;%s\\&quot; model = %s fitname = \\&quot;%s\\&quot; convname = \\&quot;%s\\&quot; sample = %d thin = %d nchains = %d # Run model fitting m = sampleMcmc(hM = model, samples = sample, thin = thin, adaptNf=rep(ceiling(0.4*sample*thin),model$nr), transient = ceiling(0.5*sample*thin), nChains = nchains, nParallel = nchains) # Assess chain convergence mpost = convertToCodaObject(m, spNamesNumbers = c(T,F), covNamesNumbers = c(T,F), Beta = TRUE, Gamma = TRUE, V = FALSE, Sigma = FALSE, Rho = TRUE, Eta = FALSE, Lambda = FALSE, Alpha = FALSE, Omega = FALSE, Psi = FALSE, Delta = FALSE) # Convert to CODA object # Fixed effects assign(paste0(\\&quot;psrf.beta.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Beta,multivariate=FALSE)$psrf) # Traits assign(paste0(\\&quot;psrf.gamma.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Gamma,multivariate=FALSE)$psrf) # Phylogeny assign(paste0(\\&quot;psrf.rho.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Rho,multivariate=FALSE)$psrf) # Write convergence data save(%s, %s, %s, file=convname) # Save model fit object save(m, file=fitname) &#39; &quot;, jobname, minutes, modelname, model, fitname, convname, sample, thin, nChains, psrf.beta.name, psrf.gamma.name, psrf.rho.name) writeLines(code, executablename) } Upload the produced hmsc/exe_XXXXX.sh files to the HPC respecting the directory structure. 7.6 Fit Hmsc models (in Mjolnir HPC) Launch the SLURM jobs by using: #Create and define tmpdir tmpdir=&quot;./tmp&quot; mkdir -p &quot;$tmpdir&quot; export TMPDIR=&quot;$tmpdir&quot; #Or launch them one by one only the ones you want to launch sbatch exe_model1_250_1.sh "],["hmsc-analysis.html", "Chapter 8 HMSC analysis 8.1 Load data 8.2 Variance partitioning 8.3 Posterior estimates 8.4 Correlations 8.5 Predict responses", " Chapter 8 HMSC analysis 8.1 Load data load(&quot;data/data.Rdata&quot;) load(&quot;hmsc/fit_model1_250_10.Rdata&quot;) 8.2 Variance partitioning # Compute variance partitioning varpart=computeVariancePartitioning(m) varpart$vals %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;variable&quot;) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(variable=factor(variable, levels=rev(c(&quot;origin&quot;,&quot;sex&quot;,&quot;logseqdepth&quot;,&quot;Random: location&quot;)))) %&gt;% group_by(variable) %&gt;% summarise(mean=mean(value)*100,sd=sd(value)*100) %&gt;% tt() tinytable_v8j9mekiecd9bvx55i2c .table td.tinytable_css_s7yuxf1qznlgq74gp0pk, .table th.tinytable_css_s7yuxf1qznlgq74gp0pk { border-bottom: solid 0.1em #d3d8dc; } variable mean sd Random: location 37.900015 25.317903 logseqdepth 56.110626 25.796874 sex 4.937460 5.612719 origin 1.051899 1.282563 # Basal tree varpart_tree &lt;- genome_tree #Varpart table varpart_table &lt;- varpart$vals %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;variable&quot;) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(genome=factor(genome, levels=rev(varpart_tree$tip.label))) %&gt;% mutate(variable=factor(variable, levels=rev(c(&quot;origin&quot;,&quot;sex&quot;,&quot;logseqdepth&quot;,&quot;Random: location&quot;)))) #Phylums phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;))%&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% varpart_tree$tip.label) %&gt;% arrange(match(genome, varpart_tree$tip.label)) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% select(phylum) colors_alphabetic &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;))%&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% varpart_tree$tip.label) %&gt;% arrange(match(genome, varpart_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() # Basal ggtree varpart_tree &lt;- varpart_tree %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum colors next to the tree tips varpart_tree &lt;- gheatmap(varpart_tree, phylum_colors, offset=-0.2, width=0.1, colnames=FALSE) + scale_fill_manual(values=colors_alphabetic)+ labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap varpart_tree &lt;- varpart_tree + new_scale_fill() # Add variance stacked barplot vertical_tree &lt;- varpart_tree + scale_fill_manual(values=c(&quot;#506a96&quot;,&quot;#cccccc&quot;,&quot;#be3e2b&quot;,&quot;#f6de6c&quot;))+ geom_fruit( data=varpart_table, geom=geom_bar, mapping = aes(x=value, y=genome, fill=variable, group=variable), pwidth = 2, offset = 0.05, width= 1, orientation=&quot;y&quot;, stat=&quot;identity&quot;)+ labs(fill=&quot;Variable&quot;) vertical_tree 8.3 Posterior estimates # Select desired support threshold support=0.9 negsupport=1-support # Basal tree postestimates_tree &lt;- genome_tree # Posterior estimate table post_beta &lt;- getPostEstimate(hM=m, parName=&quot;Beta&quot;)$support %&gt;% as.data.frame() %&gt;% mutate(variable=m$covNames) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(genome=factor(genome, levels=rev(postestimates_tree$tip.label))) %&gt;% mutate(value = case_when( value &gt;= support ~ &quot;Positive&quot;, value &lt;= negsupport ~ &quot;Negative&quot;, TRUE ~ &quot;Neutral&quot;)) %&gt;% mutate(value=factor(value, levels=c(&quot;Positive&quot;,&quot;Neutral&quot;,&quot;Negative&quot;))) %&gt;% pivot_wider(names_from = variable, values_from = value) %&gt;% #select(genome,sp_vulgaris,area_semi,area_urban,sp_vulgarisxarea_semi,sp_vulgarisxarea_urban,season_spring,season_winter,sp_vulgarisxseason_spring,sp_vulgarisxseason_winter) %&gt;% column_to_rownames(var=&quot;genome&quot;) #Phylums phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;)) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% postestimates_tree$tip.label) %&gt;% arrange(match(genome, postestimates_tree$tip.label)) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% select(phylum) colors_alphabetic &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate(phylum=str_remove_all(phylum, &quot;p__&quot;)) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% postestimates_tree$tip.label) %&gt;% arrange(match(genome, postestimates_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() # Basal ggtree postestimates_tree &lt;- postestimates_tree %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips postestimates_tree &lt;- gheatmap(postestimates_tree, phylum_colors, offset=-0.2, width=0.1, colnames=FALSE) + scale_fill_manual(values=colors_alphabetic)+ labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap postestimates_tree &lt;- postestimates_tree + new_scale_fill() # Add posterior significant heatmap postestimates_tree &lt;- gheatmap(postestimates_tree, post_beta, offset=0, width=0.5, colnames=TRUE, colnames_position=&quot;top&quot;,colnames_angle=90, colnames_offset_y=1, hjust=0) + scale_fill_manual(values=c(&quot;#be3e2b&quot;,&quot;#f4f4f4&quot;,&quot;#b2b530&quot;))+ labs(fill=&quot;Trend&quot;) postestimates_tree + vexpand(.25, 1) # expand top 8.4 Correlations #Compute the residual correlation matrix OmegaCor = computeAssociations(m) # Refernece tree (for sorting genomes) genome_tree_subset &lt;- genome_tree %&gt;% keep.tip(., tip=m$spNames) #Co-occurrence matrix at the animal level supportLevel = 0.95 toPlot = ((OmegaCor[[1]]$support&gt;supportLevel) + (OmegaCor[[1]]$support&lt;(1-supportLevel))&gt;0)*OmegaCor[[1]]$mean matrix &lt;- toPlot %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome1&quot;) %&gt;% pivot_longer(!genome1, names_to = &quot;genome2&quot;, values_to = &quot;cor&quot;) %&gt;% mutate(genome1= factor(genome1, levels=genome_tree_subset$tip.label)) %&gt;% mutate(genome2= factor(genome2, levels=genome_tree_subset$tip.label)) %&gt;% ggplot(aes(x = genome1, y = genome2, fill = cor)) + geom_tile() + scale_fill_gradient2(low = &quot;#be3e2b&quot;, mid = &quot;#f4f4f4&quot;, high = &quot;#b2b530&quot;)+ theme_void() htree &lt;- genome_tree_subset %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(.) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** vtree &lt;- genome_tree_subset %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(.) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #create composite figure grid.arrange(grobs = list(matrix,vtree), layout_matrix = rbind(c(2,1,1,1,1,1,1,1,1,1,1,1), c(2,1,1,1,1,1,1,1,1,1,1,1), c(2,1,1,1,1,1,1,1,1,1,1,1), c(2,1,1,1,1,1,1,1,1,1,1,1), c(2,1,1,1,1,1,1,1,1,1,1,1), c(2,1,1,1,1,1,1,1,1,1,1,1), c(2,1,1,1,1,1,1,1,1,1,1,1), c(2,1,1,1,1,1,1,1,1,1,1,1), c(2,1,1,1,1,1,1,1,1,1,1,1), c(2,1,1,1,1,1,1,1,1,1,1,1), c(2,1,1,1,1,1,1,1,1,1,1,1))) 8.5 Predict responses # Select modelchain of interest load(&quot;hmsc/fit_model1_250_10.Rdata&quot;) gradient = c(&quot;domestic&quot;,&quot;feral&quot;) gradientlength = length(gradient) #Treatment-specific gradient predictions pred &lt;- constructGradient(m, focalVariable = &quot;origin&quot;, non.focalVariables = list(logseqdepth=list(1),location=list(1))) %&gt;% predict(m, Gradient = ., expected = TRUE) %&gt;% do.call(rbind,.) %&gt;% as.data.frame() %&gt;% mutate(origin=rep(gradient,1000)) %&gt;% pivot_longer(!origin,names_to = &quot;genome&quot;, values_to = &quot;value&quot;) # weights: 9 (4 variable) initial value 101.072331 final value 91.392443 converged 8.5.0.1 Element level elements_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% as.data.frame() community_elements &lt;- pred %&gt;% group_by(origin, genome) %&gt;% mutate(row_id = row_number()) %&gt;% pivot_wider(names_from = genome, values_from = value) %&gt;% ungroup() %&gt;% group_split(row_id) %&gt;% as.list() %&gt;% lapply(., FUN = function(x){x %&gt;% select(-row_id) %&gt;% column_to_rownames(var = &quot;origin&quot;) %&gt;% as.data.frame() %&gt;% exp() %&gt;% t() %&gt;% tss() %&gt;% to.community(elements_table,.,GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;origin&quot;) }) calculate_slope &lt;- function(x) { lm_fit &lt;- lm(unlist(x) ~ seq_along(unlist(x))) coef(lm_fit)[2] } element_predictions &lt;- map_dfc(community_elements, function(mat) { mat %&gt;% column_to_rownames(var = &quot;origin&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rowwise() %&gt;% mutate(slope = calculate_slope(c_across(everything()))) %&gt;% select(slope) }) %&gt;% t() %&gt;% as.data.frame() %&gt;% set_names(colnames(community_elements[[1]])[-1]) %&gt;% rownames_to_column(var=&quot;iteration&quot;) %&gt;% pivot_longer(!iteration, names_to=&quot;trait&quot;,values_to=&quot;value&quot;) %&gt;% group_by(trait) %&gt;% summarise(mean=mean(value), p1 = quantile(value, probs = 0.1), p9 = quantile(value, probs = 0.9), positive_support = sum(value &gt; 0)/1000, negative_support = sum(value &lt; 0)/1000) %&gt;% arrange(-positive_support) # Positively associated element_predictions %&gt;% filter(mean &gt;0) %&gt;% arrange(-positive_support) %&gt;% filter(positive_support&gt;=0.9) %&gt;% tt() tinytable_lgta5nwsnzl0cwsqthbw .table td.tinytable_css_1e7k0rfb4n4ftckj07kc, .table th.tinytable_css_1e7k0rfb4n4ftckj07kc { border-bottom: solid 0.1em #d3d8dc; } trait mean p1 p9 positive_support negative_support D0205 0.012598000 0.0023490224 0.023531763 0.948 0.052 D0906 0.003856608 0.0001844596 0.008372241 0.931 0.069 D0208 0.009860536 0.0017838550 0.017932200 0.922 0.078 D0504 0.004658815 0.0002366114 0.009902129 0.908 0.092 D0507 0.003955784 0.0001165261 0.007343063 0.908 0.092 B0103 0.008498845 0.0001308317 0.017178267 0.906 0.094 element_predictions %&gt;% filter(mean &lt;0) %&gt;% arrange(-negative_support) %&gt;% filter(negative_support&gt;=0.9) %&gt;% tt() tinytable_2qnsawc5opc0i50ip4xu .table td.tinytable_css_zdmjfmts2yxkj5r1mhx0, .table th.tinytable_css_zdmjfmts2yxkj5r1mhx0 { border-bottom: solid 0.1em #d3d8dc; } trait mean p1 p9 positive_support negative_support D0801 -0.001652917 -0.002151535 -1.048160e-04 0.005 0.995 D0802 -0.001652917 -0.002151535 -1.048160e-04 0.005 0.995 D0517 -0.004601572 -0.007857518 -1.214754e-03 0.030 0.970 B0709 -0.002137926 -0.003711645 -5.770036e-04 0.035 0.965 B0302 -0.004889616 -0.010638724 -5.415953e-04 0.036 0.964 D0611 -0.004076752 -0.009381879 -2.137319e-04 0.042 0.958 D0903 -0.004076752 -0.009381879 -2.137319e-04 0.042 0.958 B0219 -0.004102791 -0.009531123 -2.138679e-04 0.043 0.957 D0601 -0.009419047 -0.017870105 -2.354803e-03 0.044 0.956 B0310 -0.012666099 -0.023473519 -2.643906e-03 0.046 0.954 D0817 -0.004961877 -0.010745331 -4.754330e-04 0.050 0.950 D0603 -0.001962825 -0.003870224 -3.352175e-04 0.052 0.948 D0807 -0.004206442 -0.008820872 -5.491684e-04 0.056 0.944 D0610 -0.003082764 -0.005046227 -8.629378e-04 0.057 0.943 B0804 -0.016028324 -0.029638644 -3.465492e-03 0.058 0.942 B0303 -0.011417557 -0.021341370 -1.732196e-03 0.070 0.930 B0603 -0.016022751 -0.032242536 -1.962945e-03 0.070 0.930 D0908 -0.015809551 -0.028824706 -2.833161e-03 0.071 0.929 B0214 -0.021197078 -0.039247507 -3.021418e-03 0.072 0.928 D0606 -0.005747534 -0.011465796 -5.709914e-04 0.074 0.926 D0508 -0.003289659 -0.007703875 -7.819120e-05 0.083 0.917 B0601 -0.008981230 -0.018091207 -6.178199e-04 0.086 0.914 B0401 -0.011562378 -0.022822641 -5.148959e-04 0.087 0.913 D0612 -0.001698286 -0.002927157 -9.510122e-05 0.087 0.913 B0309 -0.007734646 -0.015600834 -8.281195e-05 0.095 0.905 D0816 -0.005808299 -0.012158922 -2.032688e-04 0.096 0.904 B0204 -0.015135407 -0.032062082 -2.853902e-04 0.097 0.903 positive &lt;- element_predictions %&gt;% filter(mean &gt;0) %&gt;% arrange(mean) %&gt;% filter(positive_support&gt;=0.9) %&gt;% select(-negative_support) %&gt;% rename(support=positive_support) negative &lt;- element_predictions %&gt;% filter(mean &lt;0) %&gt;% arrange(mean) %&gt;% filter(negative_support&gt;=0.9) %&gt;% select(-positive_support) %&gt;% rename(support=negative_support) bind_rows(positive,negative) %&gt;% left_join(GIFT_db,by=join_by(trait==Code_element)) %&gt;% mutate(trait=factor(trait,levels=c(rev(positive$trait),rev(negative$trait)))) %&gt;% ggplot(aes(x=mean, y=fct_rev(trait), xmin=p1, xmax=p9, color=Function)) + geom_point() + geom_errorbar() + xlim(c(-0.04,0.04)) + geom_vline(xintercept=0) + scale_color_manual(values = c(&quot;#debc14&quot;,&quot;#440526&quot;,&quot;#dc7c17&quot;,&quot;#172742&quot;,&quot;#debc14&quot;,&quot;#440526&quot;,&quot;#dc7c17&quot;,&quot;#172742&quot;,&quot;#357379&quot;,&quot;#6c7e2c&quot;,&quot;#d8dc69&quot;,&quot;#774d35&quot;,&quot;#db717d&quot;)) + theme_minimal() + labs(x=&quot;Regression coefficient&quot;,y=&quot;Functional trait&quot;) 8.5.0.2 Function level functions_table &lt;- elements_table %&gt;% to.functions(., GIFT_db) %&gt;% as.data.frame() community_functions &lt;- pred %&gt;% group_by(origin, genome) %&gt;% mutate(row_id = row_number()) %&gt;% pivot_wider(names_from = genome, values_from = value) %&gt;% ungroup() %&gt;% group_split(row_id) %&gt;% as.list() %&gt;% lapply(., FUN = function(x){x %&gt;% select(-row_id) %&gt;% column_to_rownames(var = &quot;origin&quot;) %&gt;% as.data.frame() %&gt;% exp() %&gt;% t() %&gt;% tss() %&gt;% to.community(functions_table,.,GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;origin&quot;) }) #max-min option calculate_slope &lt;- function(x) { lm_fit &lt;- lm(unlist(x) ~ seq_along(unlist(x))) coef(lm_fit)[2] } function_predictions &lt;- map_dfc(community_functions, function(mat) { mat %&gt;% column_to_rownames(var = &quot;origin&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rowwise() %&gt;% mutate(slope = calculate_slope(c_across(everything()))) %&gt;% select(slope) }) %&gt;% t() %&gt;% as.data.frame() %&gt;% set_names(colnames(community_functions[[1]])[-1]) %&gt;% rownames_to_column(var=&quot;iteration&quot;) %&gt;% pivot_longer(!iteration, names_to=&quot;trait&quot;,values_to=&quot;value&quot;) %&gt;% group_by(trait) %&gt;% summarise(mean=mean(value), p1 = quantile(value, probs = 0.1), p9 = quantile(value, probs = 0.9), positive_support = sum(value &gt; 0)/1000, negative_support = sum(value &lt; 0)/1000) %&gt;% arrange(-positive_support) # Positively associated function_predictions %&gt;% filter(mean &gt;0) %&gt;% arrange(-positive_support) %&gt;% tt() tinytable_6aqthmxo1jibuhcrsdva .table td.tinytable_css_5nmal5oqb8nyuoef8lvy, .table th.tinytable_css_5nmal5oqb8nyuoef8lvy { border-bottom: solid 0.1em #d3d8dc; } trait mean p1 p9 positive_support negative_support D02 8.297381e-03 -0.0034767283 0.0207677742 0.811 0.189 B08 7.845217e-03 -0.0031696928 0.0176622281 0.789 0.211 B01 1.081773e-03 -0.0065012399 0.0081741420 0.616 0.384 S01 8.592019e-04 -0.0130338151 0.0137154306 0.573 0.427 B10 2.004382e-06 -0.0002987702 0.0002626824 0.497 0.503 B09 3.708401e-05 -0.0005547998 0.0005152844 0.367 0.633 # Negatively associated function_predictions %&gt;% filter(mean &lt;0) %&gt;% arrange(-negative_support) %&gt;% tt() tinytable_ogjomrgc1iaher14oi2w .table td.tinytable_css_2dvoy0mfqrzb2u6nfwbd, .table th.tinytable_css_2dvoy0mfqrzb2u6nfwbd { border-bottom: solid 0.1em #d3d8dc; } trait mean p1 p9 positive_support negative_support D08 -0.0011505608 -0.002205838 -0.0001933344 0.043 0.957 B03 -0.0105800233 -0.018027872 -0.0024996566 0.061 0.939 D06 -0.0031587249 -0.006985716 0.0001070787 0.114 0.886 B04 -0.0080202588 -0.017941396 0.0014229755 0.152 0.848 D07 -0.0121782070 -0.028597144 0.0039737568 0.175 0.825 B06 -0.0066092580 -0.016952017 0.0030489265 0.189 0.811 D05 -0.0015695446 -0.007413673 0.0041523303 0.218 0.782 D03 -0.0041713761 -0.012777500 0.0033036602 0.230 0.770 S03 -0.0092505734 -0.031613460 0.0170041249 0.256 0.744 B02 -0.0031647641 -0.012342889 0.0051270290 0.284 0.716 D09 -0.0017619642 -0.007887604 0.0053050996 0.301 0.699 S02 -0.0043281804 -0.014879874 0.0035011445 0.343 0.657 B07 -0.0034669779 -0.015505790 0.0087514205 0.344 0.656 D01 -0.0001653947 -0.005040160 0.0048526834 0.435 0.565 positive &lt;- function_predictions %&gt;% filter(mean &gt;0) %&gt;% arrange(mean) %&gt;% filter(positive_support&gt;=0.9) %&gt;% select(-negative_support) %&gt;% rename(support=positive_support) negative &lt;- function_predictions %&gt;% filter(mean &lt;0) %&gt;% arrange(mean) %&gt;% filter(negative_support&gt;=0.9) %&gt;% select(-positive_support) %&gt;% rename(support=negative_support) bind_rows(positive,negative) %&gt;% left_join(GIFT_db,by=join_by(trait==Code_function)) %&gt;% mutate(trait=factor(trait,levels=c(rev(positive$trait),rev(negative$trait)))) %&gt;% ggplot(aes(x=mean, y=fct_rev(trait), xmin=p1, xmax=p9, color=Function)) + geom_point() + geom_errorbar() + xlim(c(-0.02,0.02)) + geom_vline(xintercept=0) + scale_color_manual(values = c(&quot;#debc14&quot;,&quot;#440526&quot;,&quot;#dc7c17&quot;,&quot;#172742&quot;,&quot;#debc14&quot;,&quot;#440526&quot;,&quot;#dc7c17&quot;,&quot;#172742&quot;,&quot;#357379&quot;,&quot;#6c7e2c&quot;,&quot;#d8dc69&quot;,&quot;#774d35&quot;,&quot;#db717d&quot;)) + theme_minimal() + labs(x=&quot;Regression coefficient&quot;,y=&quot;Functional trait&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
